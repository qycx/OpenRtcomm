using System;
using System.Collections.Generic;
using System.Text;

namespace qy
{
    partial class qyFuncs
{
		public static MIS_CHANNEL getChannelByType(MIS_CNT pMisCnt, uint uiChannelType)
		{
			int i;

			if (null==pMisCnt) return null;

			if (0==uiChannelType) return pMisCnt.channels[0];

			for (i = 0; i < pMisCnt.channels.Length; i++)
			{
				if (pMisCnt.channels[i].uiType == uiChannelType) return pMisCnt.channels[i];
			}

			return pMisCnt.channels[0];

		}


		public static bool bChannelOk(MIS_CHANNEL pChannel)
		{
			if (null==pChannel) return false;
			MIS_CNT pMisCnt = pChannel.pMisCnt;
			if (null==pMisCnt) return false;
			CCtxQmc pProcInfo = (CCtxQmc)pMisCnt.pProcInfoParam;
			if (null==pProcInfo) return false;
			CCtxQyMc pQyMc = pProcInfo.pQyMc;
			if (null==pQyMc) return false;

			//
			if (pChannel.bSessionOpen)
			{
				uint dwTickCnt = myGetTickCount();
				//
				if (pChannel.uiType != Consts.CONST_channelType_talking)
				{
					if (dwTickCnt - pChannel.status.dwTickCnt_lastStartToRecv > pQyMc.cfg.iTimeoutInMs_channelIdle_others
						&& dwTickCnt - pChannel.status.dwTickCnt_lastEndSending > pQyMc.cfg.iTimeoutInMs_channelIdle_others)
					{
						//qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), _T("IsClient"), 0, _T(""), _T(""), _T("Channel %s timeout, idle too long, iTimeoutInMs_channelsIdle_others %d"), qyGetDesByType1(CONST_channelTypeTable, pChannel->uiType), pQyMc->cfg.iTimeoutInMs_channelIdle_others);
						return false;
					}
#if  false
				if  (  dwTickCnt  -  pChannel->status.dwTickCnt_lastStartToRecv  >  pQyMc->cfg.iTimeoutInMs_channelIdle_recv_others  )  {
					qyShowInfo1(  CONST_qyShowType_qwmComm,  0,  (  ""  ),  _T(  "IsClient"  ),  0,  _T(  ""  ),  _T(  ""  ),  _T(  "Channel %s timeout, idle too long, iTimeoutInMs_channelsIdle_recv_others %d"  ),  qyGetDesByType1(  CONST_channelTypeTable,  pChannel->uiType  ),  pQyMc->cfg.iTimeoutInMs_channelIdle_recv_others  );
					return  FALSE;
				}
#endif
				}
				else
				{
					if (dwTickCnt - pChannel.status.dwTickCnt_lastStartToRecv > pQyMc.cfg.iTimeoutInMs_channelIdle_recv_talk)
					{
						//qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), _T("IsClient"), 0, _T(""), _T(""), _T("Channel %s timeout, idle too long, iTimeoutInMs_channelsIdle_recv_talk %d"), qyGetDesByType1(CONST_channelTypeTable, pChannel->uiType), pQyMc->cfg.iTimeoutInMs_channelIdle_recv_talk);
						return false;
					}
					//  2017/10/03. 当talk通道堵塞时，应尽快重新连接
					if (dwTickCnt - pProcInfo.status.dwTickCnt_sendTo_applyForOrgReq < 5000
						&& pProcInfo.status.dwTickCnt_sendTo_applyForOrgReq > pChannel.status.dwTickCnt_lastStartToRecv + 10000)
					{
						//qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), _T("IsClient"), 0, _T(""), _T(""), _T("Channel %s timeout, idle too long, dwTickCnt_sendTo_applyForOrgReq > dwTickCnt_lastStartToRecv + 10000"), qyGetDesByType1(CONST_channelTypeTable, pChannel->uiType));
						return false;
					}
					//  2012/05/21.以下为了防止误判,用另一个变量做了一个辅助. 这样让判断至少在超时2次后才生效
					bool tmp_bOk = true;
					if (!isQ2Empty(pChannel.toSendQ2))
					{   //  2012/05/21
						if (dwTickCnt - pChannel.status.dwTickCnt_lastEndSending > pQyMc.cfg.iTimeoutInMs_channelIdle_others)
						{
							tmp_bOk = false;
						}
					}
					if (tmp_bOk) pChannel.status.dwTickCnt_noSending_start = 0;
					if (pChannel.status.dwTickCnt_noSending_start!=0)
					{
						if (dwTickCnt - pChannel.status.dwTickCnt_noSending_start > pQyMc.cfg.iTimeoutInMs_channelIdle_others + 5000)
						{
							//qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), _T("IsClient"), 0, _T(""), _T(""), _T("Channel %s timeout, idle too long, iTimeoutInMs_channelsIdle_others %d"), qyGetDesByType1(CONST_channelTypeTable, pChannel->uiType), pQyMc->cfg.iTimeoutInMs_channelIdle_others);
							return false;
						}
					}
					if (!tmp_bOk)
					{
						if (0==pChannel.status.dwTickCnt_noSending_start)
						{
							pChannel.status.dwTickCnt_noSending_start = dwTickCnt;
						}
					}
				}
			}

#if false
			//  2015/9/11
			if (pProcInfo!=null)
			{
				if (pProcInfo.status.waitToQuit.dwTickCnt_start)
				{
					return FALSE;
				}
			}
#endif

			//
			return (!pQyMc.bQuit && !pProcInfo.bQuit_threadProc_isCli && pChannel.bSessionOpen && !pChannel.status.ulbSessionErr);

		}




	}
}
