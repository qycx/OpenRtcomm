using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;

namespace qy
{
   partial class qyFuncs
{
		public static unsafe int initMisMsg(IntPtr p_msg)
		{
			int iErr = -1;
			void* pMsgParam = (void *)p_msg;
			
			/*
			MIS_MSGU* pMsg = (MIS_MSGU*)pMsgParam;
			// 
			QY_MC* pQyMc = QY_GET_GBUF();
			if (pQyMc->iServiceId != CONST_qyServiceId_mis) return -1;
			QY_SERVICEGUI_INFO* pSci = getServiceGuiInfo(pQyMc, pQyMc->iServiceId);
			if (!pSci) return -1;
			MC_VAR_isCli* pProcInfo = (MC_VAR_isCli*)pSci->pVar;
			if (!pProcInfo) return -1;
			//  int								index;
			int i;

# ifdef  __DEBUG__
			traceLogA("initMisMsg enters");
#endif
			if (GetCurrentThreadId() != pProcInfo->dwThreadId_mgr)
			{
				showInfo_open(0, 0, _T("initMisMsg failed, not thread_mgr"));
# ifdef  __DEBUG__
				MACRO_qyAssert(0, _T("initMisMsg failed, not thread_mgr"));
#endif
				return -1;
			}

			//
			switch (pMsg->uiType)
			{
				case CONST_misMsgType_task:
					{
						IM_CONTENTU* pContent = M_getMsgContent(pMsg->task.ucFlg, &pMsg->task.data);
						if (!pContent) goto errLabel;

						switch (pContent->uiType)
						{
							case CONST_imCommType_transferAvInfo:
								{
									//
									if (pContent->transferAvInfo.tmp_usSubtype != CONST_transferAvInfo_subtype_task)
									{
										//  2016/04/18
# ifdef  __DEBUG__
										MACRO_qyAssert(0, _T("transferAvInfo.subtype err, not task"));
#endif
										goto errLabel;
									}
									//
									TRANSFER_av_task* pTransferAvTask = (TRANSFER_av_task*)pContent;
									//
									AV_TRAN_INFO* pAvTran = &pContent->transferAvInfo.tranInfo;
									PROC_TASK_AV* pTask = &pTransferAvTask->myTask;

									//  2014/08/04
									pTask->saveVideo.uiObjType = pContent->transferAvInfo.viewDynBmp.resObj.uiObjType;          //  2014/08/08
									pTask->saveVideo.usIndex_obj = pContent->transferAvInfo.viewDynBmp.resObj.usIndex_obj;
									pTask->saveVideo.ucbSaveVideo_req = pContent->transferAvInfo.viewDynBmp.ucbSaveVideo;

									//
									if (!pTask->usCntLimit_mems_from || pTask->usCntLimit_mems_from > MAX_mems_taskAv) goto errLabel;

									//  2008/11/16
									HDC hScreenDC =::GetDC(NULL);
									pTask->remoteAssist.maxxScreen = GetDeviceCaps(hScreenDC, HORZRES);
									pTask->remoteAssist.maxyScreen = GetDeviceCaps(hScreenDC, VERTRES);
								::ReleaseDC(NULL, hScreenDC);
									//
									if (!pTask->remoteAssist.maxxScreen || !pTask->remoteAssist.maxyScreen) goto errLabel;

									//  2009/02/16
									pTask->pMems_from = (TASK_AV_FROM*)mymalloc(pTask->usCntLimit_mems_from * sizeof(TASK_AV_FROM));
									if (!pTask->pMems_from)
									{
										qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo->who_showInfo, 0, _T(""), _T(""), _T("initMisMsg: malloc for avInfo.pMems_from failed"));
										goto errLabel;
									}
									memset(pTask->pMems_from, 0, pTask->usCntLimit_mems_from * sizeof(TASK_AV_FROM));


									//
									qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo->who_showInfo, 0, _T(""), _T(""), _T("initMisMsg: %s usCntLimit_mems %d, usCntLimit_activeMems %d"), pTask->ucbVideoConferenceStarter ? _T("Video conference starter:") : _T(""), pTask->usCntLimit_mems_from, pTask->usCntLimit_activeMems_from);

									//  2010/08/31
									memcpy(&pTask->pMems_from[0], &pTask->mem0_from, sizeof(pTask->pMems_from[0])  );

									//
									if (pTask->ucbVideoConferenceStarter)
									{   //  

										//  2009/02/17
										//  memcpy(  &pTask->pMems_from[0],  &pTask->mem0_from,  sizeof(  pTask->pMems_from[0]  )  );

										//
										if (pTask->videoConferenceCfg.iCols * pTask->videoConferenceCfg.iRows != pTask->usCntLimit_mems_from) goto errLabel;
										//  if  (  !pTask->videoConferenceCfg.iWidth_pic  ||  !pTask->videoConferenceCfg.iHeight_pic  )  goto  errLabel;
										pTask->usCntLimit_activeMems_from = pTask->videoConferenceCfg.usCntLimit_activeMems_from;
										if (!pTask->usCntLimit_activeMems_from || pTask->usCntLimit_activeMems_from > pTask->usCntLimit_mems_from)
										{
											traceLogA("initMisMsg: usCntLimit_activeMems_from error, %d", pTask->usCntLimit_activeMems_from);
											goto errLabel;
										}

										//
										//  if  (  makeBmpInfoHeader_rgb(  24,  pTask->videoConferenceCfg.iWidth_pic,  pTask->videoConferenceCfg.iHeight_pic,  &pContent->transferAvInfo.tranInfo.video.vh_decompress.bih  )  )  goto  errLabel;


										//  pBmpInfo_input	=	&pContent->transferAvInfo.tranInfo.video.vh_decompress.bih;

										//  fccHandler  =  fourccStr2i(  pContent->transferAvInfo.tranInfo.video.compressor.fourccStr  );

									}

									//  if  (  pTask->ucbVideoConferenceStarter  )  
									{   //  2011/01/23.

										//
										GENERIC_Q_CFG qCfg;
										memcpy(&qCfg, &pProcInfo->cfg.outputQ_toMix_audio, sizeof(qCfg));
#if  0
										_sntprintf(  qCfg.name,  mycountof(  qCfg.name  ),  _T(  "%s%u"  ),  qCfg.name,  pAvTran->audio.uiTranNo_openAvDev  );
										_sntprintf(  qCfg.mutexName_prefix,  mycountof(  qCfg.mutexName_prefix  ),  _T(  "%s%u"  ),  qCfg.mutexName_prefix,  pAvTran->audio.uiTranNo_openAvDev  );		
#endif
										//  2012/03/24
										_sntprintf(qCfg.name, mycountof(qCfg.name), _T("%s%u"), qCfg.name, pMsg->task.iTaskId);
										_sntprintf(qCfg.mutexName_prefix, mycountof(qCfg.mutexName_prefix), _T("%s%u"), qCfg.mutexName_prefix, pMsg->task.iTaskId);

										if (!(pTask->mixer.pOutputQ2 = (QY_Q2*)mymalloc(sizeof(QY_Q2)))) goto errLabel;
										memset(pTask->mixer.pOutputQ2, 0, sizeof(QY_Q2));
										if (initQyQ2(&qCfg, &pQyMc->cfg.rwLockParam, 1, NULL, mallocMemory, mymalloc, 0, 0, freeMemory, myfree, NULL, pTask->mixer.pOutputQ2)) goto errLabel;

										//  2009/07/26
										memcpy(&qCfg, &pProcInfo->cfg.outputQ_toMix_video, sizeof(qCfg));
#if  0
										_sntprintf(  qCfg.name,  mycountof(  qCfg.name  ),  _T(  "%s%u"  ),  qCfg.name,  pAvTran->video.uiTranNo_openAvDev  );
										_sntprintf(  qCfg.mutexName_prefix,  mycountof(  qCfg.mutexName_prefix  ),  _T(  "%s%u"  ),  qCfg.mutexName_prefix,  pAvTran->video.uiTranNo_openAvDev  );		
#endif
										//  2012/03/24
										_sntprintf(qCfg.name, mycountof(qCfg.name), _T("%s%u"), qCfg.name, pMsg->task.iTaskId);
										_sntprintf(qCfg.mutexName_prefix, mycountof(qCfg.mutexName_prefix), _T("%s%u"), qCfg.mutexName_prefix, pMsg->task.iTaskId);

										if (!(pTask->photomosaic.pOutputQ2 = (QY_Q2*)mymalloc(sizeof(QY_Q2)))) goto errLabel;
										memset(pTask->photomosaic.pOutputQ2, 0, sizeof(QY_Q2));
										if (initQyQ2(&qCfg, &pQyMc->cfg.rwLockParam, 1, NULL, mallocMemory, mymalloc, 0, 0, freeMemory, myfree, NULL, pTask->photomosaic.pOutputQ2)) goto errLabel;

										//
									}

									//
									pTask->uiTranNo_lastModified_pMems_from = getuiNextTranNo(0, 0, 0);


									//  2009/05/12. init transforms
									switch (pContent->transferAvInfo.uiTaskType)
									{
										case CONST_imTaskType_transferAvInfo:
#if  10
												   pTask->usCntLimit_transforms  =  pTask->ucbVideoConferenceStarter  ?  pTask->usCntLimit_activeMems_from  :  1;
#else
											traceLogA("Not finished: initMisMsg: for test. here.");
											pTask->usCntLimit_transforms = 1;
#endif

											break;
										case CONST_imTaskType_viewDynBmp:           //  2009/09/08
											pTask->usCntLimit_transforms = 1;
											break;
										default:
											break;
									}
									if (pTransferAvTask->myTask.doProxy.bExists_avProxy)
									{
										pTask->usCntLimit_transforms = 1;
									}
									if (initTransforms(pProcInfo, &pMsg->task.addr_logicalPeer, pMsg->task.iTaskId, pContent->transferAvInfo.uiTaskType, &pContent->transferAvInfo.tranInfo, pTask, &pMsg->task)) goto errLabel;
									if (startTransformThreads(pProcInfo, pContent->transferAvInfo.uiTaskType, pTask)) goto errLabel;


									if (pTask->ucbVideoConferenceStarter)
									{
										//  2011/12/08
										pTask->usCntLimit_dispatchs = pTask->usCntLimit_transforms;
									}
									if (pTask->doProxy.bExists_avProxy)
									{  //  2014/11/21
										pTask->usCntLimit_dispatchs = pTask->usCntLimit_transforms;
									}

									//  2014/11/21
									if (pTask->usCntLimit_dispatchs)
									{
										//  2009/06/17				
										if (initDispatch_qis(pProcInfo, &pMsg->task.addr_logicalPeer, pMsg->task.iTaskId, &pContent->transferAvInfo.tranInfo, pTask)) goto errLabel;
									}

									//  2009/10/15
									_sntprintf(pTask->debugHint, mycountof(pTask->debugHint), _T("avReq: taskId %d, %s"), pMsg->task.iTaskId, qyGetDesByType1(getResTable(0, &pQyMc->cusRes, CONST_resId_imTaskTypeTable), pContent->transferAvInfo.uiTaskType));
									//  traceLogA(  "%S",  pTask->debugHint  );

									//  2018/10/30
									if (pContent->transferAvInfo.uiTaskType == CONST_imTaskType_transferAvInfo)
									{
										PostMessage(pTask->hWnd_task, CONST_qyWm_postComm, CONST_qyWmParam_misMsgInited, 0);
									}

								}
								break;
							case CONST_imCommType_transferAvReplyInfo:
								{
									AV_TRAN_INFO* pAvTran = &pContent->transferAvReplyInfo.tranInfo;
									//
									PROC_TASK_AV* pTask = get_transferAvReplyInfo_pTask(&pContent->transferAvReplyInfo, _T(""));    //  &pContent->transferAvReplyInfo.myTask;
									if (!pTask) goto errLabel;

									//
									if (pTask->usCntLimit_mems_from < 2 || pTask->usCntLimit_mems_from > MAX_mems_taskAv)
									{
										qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo->who_showInfo, 0, _T(""), _T(""), _T("initMisMsg failed, transferAvReply, usCntLimit_mems_from %d, err"), pTask->usCntLimit_mems_from);
										goto errLabel;
									}

									//  2009/02/16
									pTask->pMems_from = (TASK_AV_FROM*)mymalloc(pTask->usCntLimit_mems_from * sizeof(TASK_AV_FROM));
									if (!pTask->pMems_from)
									{
										qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo->who_showInfo, 0, _T(""), _T(""), _T("initMisMsg: malloc for avReplyInfo.pMems_from failed"));
										goto errLabel;
									}
									memset(pTask->pMems_from, 0, pTask->usCntLimit_mems_from * sizeof(TASK_AV_FROM));

									if (pTask->ucbVideoConference
										|| pTask->receiver.bRecvd_proxiedTranInfo)
									{
										//  2009/05/31											
										pTask->audio.pMsgTask_toTransform = mymalloc(sizeof(MIS_MSG_TASK));
										if (!pTask->audio.pMsgTask_toTransform) goto errLabel;
										MACRO_memset_misMsgTask(pTask->audio.pMsgTask_toTransform);

										pTask->video.pMsgTask_toTransform = mymalloc(sizeof(MIS_MSG_TASK));
										if (!pTask->video.pMsgTask_toTransform) goto errLabel;
										MACRO_memset_misMsgTask(pTask->video.pMsgTask_toTransform);
									}

									//  2009/02/17
									memcpy(&pTask->pMems_from[0], &pTask->mem0_from, sizeof(pTask->pMems_from[0])  );

									//  2014/11/21
									if (pTask->receiver.bRecvd_proxiedTranInfo)
									{
										if (pTask->usCntLimit_mems_from < 2) goto errLabel;
										memcpy(&pTask->pMems_from[1], &pTask->receiver.proxied_from, sizeof(pTask->pMems_from[1])  );
									}


									//  2011/01/26
									//  if  (  pTask->ucbVideoConference  )  
									{   //  2011/01/23.

										//
										GENERIC_Q_CFG qCfg;
										memcpy(&qCfg, &pProcInfo->cfg.outputQ_toMix_audio, sizeof(qCfg));
#if  0
										_sntprintf(  qCfg.name,  mycountof(  qCfg.name  ),  _T(  "%s%u"  ),  qCfg.name,  pAvTran->audio.uiTranNo_openAvDev  );
										_sntprintf(  qCfg.mutexName_prefix,  mycountof(  qCfg.mutexName_prefix  ),  _T(  "%s%u"  ),  qCfg.mutexName_prefix,  pAvTran->audio.uiTranNo_openAvDev  );		
#endif
										//  2012/03/24
										_sntprintf(qCfg.name, mycountof(qCfg.name), _T("%s%u"), qCfg.name, pMsg->task.iTaskId);
										_sntprintf(qCfg.mutexName_prefix, mycountof(qCfg.mutexName_prefix), _T("%s%u"), qCfg.mutexName_prefix, pMsg->task.iTaskId);


										if (!(pTask->mixer.pOutputQ2 = (QY_Q2*)mymalloc(sizeof(QY_Q2)))) goto errLabel;
										memset(pTask->mixer.pOutputQ2, 0, sizeof(QY_Q2));
										if (initQyQ2(&qCfg, &pQyMc->cfg.rwLockParam, 1, NULL, mallocMemory, mymalloc, 0, 0, freeMemory, myfree, NULL, pTask->mixer.pOutputQ2)) goto errLabel;

										//  2009/07/26
										memcpy(&qCfg, &pProcInfo->cfg.outputQ_toMix_video, sizeof(qCfg));
#if  0
										_sntprintf(  qCfg.name,  mycountof(  qCfg.name  ),  _T(  "%s%u"  ),  qCfg.name,  pAvTran->video.uiTranNo_openAvDev  );
										_sntprintf(  qCfg.mutexName_prefix,  mycountof(  qCfg.mutexName_prefix  ),  _T(  "%s%u"  ),  qCfg.mutexName_prefix,  pAvTran->video.uiTranNo_openAvDev  );		
#endif
										//  2012/03/24
										_sntprintf(qCfg.name, mycountof(qCfg.name), _T("%s%u"), qCfg.name, pMsg->task.iTaskId);
										_sntprintf(qCfg.mutexName_prefix, mycountof(qCfg.mutexName_prefix), _T("%s%u"), qCfg.mutexName_prefix, pMsg->task.iTaskId);


										if (!(pTask->photomosaic.pOutputQ2 = (QY_Q2*)mymalloc(sizeof(QY_Q2)))) goto errLabel;
										memset(pTask->photomosaic.pOutputQ2, 0, sizeof(QY_Q2));
										if (initQyQ2(&qCfg, &pQyMc->cfg.rwLockParam, 1, NULL, mallocMemory, mymalloc, 0, 0, freeMemory, myfree, NULL, pTask->photomosaic.pOutputQ2)) goto errLabel;

										//
									}


									//  2009/05/12. init transforms
									pTask->usCntLimit_transforms = pTask->ucbVideoConference ? pTask->usCntLimit_activeMems_from : 1;
									if (initTransforms(pProcInfo, &pMsg->task.addr_logicalPeer, pMsg->task.iTaskId, pMsg->task.uiTaskType, &pContent->transferAvReplyInfo.tranInfo, pTask, &pMsg->task)) goto errLabel;
									if (startTransformThreads(pProcInfo, pMsg->task.uiTaskType, pTask)) goto errLabel;

									//  2009/10/15
									_sntprintf(pTask->debugHint, mycountof(pTask->debugHint), _T("avReply: taskId %d"), pMsg->task.iTaskId);
									//  traceLogA(  "%S",  pTask->debugHint  );

								}
								break;
							default:
								break;
						}

					}
					break;
				default:
					break;
			}
			*/

			iErr = 0;
		errLabel:

			if (iErr!=0)
			{
				//qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), _T("IsClient"), 0, _T(""), _T(""), _T("initMisMsg failed, to call exitMisMsg"));
				//
				exitMisMsg((IntPtr)pMsgParam);
			}


			//qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo->who_showInfo, 0, _T(""), _T(""), _T("initMisMsg leaves with %s"), iErr ? _T("Failed") : _T("OK"));

			//traceLogA("initMisMsg leaves with %s", iErr ? "failed" : "OK");

			return iErr;
		}

		public static unsafe void exitMisMsg(IntPtr p_msg)
		{
			void* pMsgParam = (void *)p_msg;
			/*
			MIS_MSGU* pMsg = (MIS_MSGU*)pMsgParam;
			int index;
			QY_MC* pQyMc = QY_GET_GBUF();
			QY_SERVICEGUI_INFO* pSgi = (QY_SERVICEGUI_INFO*)getServiceGuiInfo(pQyMc, CONST_qyServiceId_is);
			if (!pSgi) return;
			MC_VAR_isCli* pProcInfo = (MC_VAR_isCli*)pSgi->pVar;
			if (!pProcInfo) return;
			int i;

# ifdef  __DEBUG__
			traceLogA("exitMisMsg enters");
#endif
			qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo->who_showInfo, 0, _T(""), _T(""), _T("exitMisMsg enters"));

			//
			if (GetCurrentThreadId() != pProcInfo->dwThreadId_mgr)
			{
				showInfo_open(0, 0, _T("exitMisMsg failed, not thread_mgr"));
# ifdef  __DEBUG__
				MACRO_qyAssert(0, _T("exitMisMsg failed, not thread_mgr"));
#endif
			}

			//
			switch (pMsg->uiType)
			{
				case CONST_misMsgType_task:
					{
						IM_CONTENTU* pContent = M_getMsgContent(pMsg->task.ucFlg, &pMsg->task.data);
						if (!pContent) goto errLabel;

						printMisMsg(0, 0, pMsg);

						switch (pContent->uiType)
						{
							case CONST_imCommType_transferFileReq:
								if (pContent->transferFileReq.fp)
								{
# ifdef  __DEBUG__
									traceLogA("exitMisMsg: transferFileReq:{%S}", pContent->transferFileReq.fullFilePath);
#endif
									fclose(pContent->transferFileReq.fp);
								}
								break;
							case CONST_imCommType_transferFileReplyReq:
								if (pContent->transferFileReplyReq.fp)
								{
# ifdef  __DEBUG__
									traceLogA("exitMisMsg: transferFileReplyReq:{%S}", pContent->transferFileReplyReq.fullFilePath_save);
#endif
									fclose(pContent->transferFileReplyReq.fp);
								}
								break;
							case CONST_imCommType_transferAvInfo:
								{
									if (pContent->transferAvInfo.tmp_usSubtype != CONST_transferAvInfo_subtype_task)
									{
# ifdef  __DEBUG__
										MACRO_qyAssert(0, _T("transferAvInfo.subtype err, not task"));
#endif
										break;
									}
									TRANSFER_av_task* pTransferAvTask = (TRANSFER_av_task*)pContent;
									PROC_TASK_AV* pTask = &pTransferAvTask->myTask;

									//  2008/11/20¡£°´Àí£¬Ö»ÓÐÔ¶³ÌÐ­Öú²Å¿ÉÒÔÇåÀí¡£µ«ÊÇËÆºõÒ²Ã»ÓÐÊ²Ã´Ó°Ïì¡£
									clearShiftKeys();

									//  2010/09/05
									QY_SHARED_OBJ* pSharedObj = NULL;
									if ((pSharedObj = getSharedObjByIndex(pProcInfo, pTask->iIndex_sharedObj)))
									{
#if  0
										removeFromMsgrs_sendLocalAv(  pProcInfo,  (  MIS_CNT  *  )pMsg->task.pMisCnt,  &pMsg->task.idInfo_taskReceiver,  pSharedObj  );
#endif
									}

									//  2009/06/17
									exitDispatch_qis(pTask);

									//  2009/05/12
									exitTransforms(pProcInfo, pTask);

									//
									for (index = 0; index < pTask->usCntLimit_mems_from; index++)
									{
										//  exitTaskAvFrom_video(  pProcInfo,  &pContent->transferAvInfo.myTask.pMems_from[index]  );
										//  exitTaskAvFrom_audio(  pProcInfo,  &pContent->transferAvInfo.myTask.pMems_from[index]  );
									}

									//  if  (  pTask->mixer.pMsgTask_toCompress  )  free(  pTask->mixer.pMsgTask_toCompress  );

									//  if  (  pTask->mixer.pOutputQ  )  genericQFree(  pTask->mixer.pOutputQ  );
									if (pTask->mixer.pOutputQ2)
									{
										exitQyQ2(pTask->mixer.pOutputQ2);
										MACRO_safeFree(pTask->mixer.pOutputQ2);
									}
									if (pTask->photomosaic.pOutputQ2)
									{       //  2009/07/26
										exitQyQ2(pTask->photomosaic.pOutputQ2);
										MACRO_safeFree(pTask->photomosaic.pOutputQ2);
									}

									//  2008/10/06
									if (!pTask->doProxy.bExists_avProxy)
									{       //  2014/11/20
										if (pContent->transferAvInfo.uiTaskType != CONST_imTaskType_transferAvInfo)
										{   //  
											askSharedObjToStop(pProcInfo, pSharedObj, pQyMc->gui.hMainWnd, _T("exitMisMsg avInfo"));
										}
									}

									//  2009/05/31
									MACRO_safeFree(pTask->audio.pMsgTask_toTransform);
									MACRO_safeFree(pTask->video.pMsgTask_toTransform);

									//  2009/02/16
									if (pTask->pMems_from) free(pTask->pMems_from);

								}
								//
								break;
							case CONST_imCommType_transferAvReplyInfo:
								{
									PROC_TASK_AV* pTask = get_transferAvReplyInfo_pTask(&pContent->transferAvReplyInfo, _T(""));  //  &pContent->transferAvReplyInfo.myTask;
									if (!pTask) break;

									//  2008/11/20¡£°´Àí£¬Ö»ÓÐÔ¶³ÌÐ­Öú²Å¿ÉÒÔÇåÀí¡£µ«ÊÇËÆºõÒ²Ã»ÓÐÊ²Ã´Ó°Ïì¡£
									clearShiftKeys();

									//  2010/09/05
#if  0
								QY_SHARED_OBJ	*	pSharedObj	=	NULL;
								if  (  (  pSharedObj  =  getSharedObjByIndex(  pProcInfo,  pTask->iIndex_sharedObj  )  )  )  {
                                    removeFromMsgrs_sendLocalAv(  pProcInfo,  (  MIS_CNT  *  )pMsg->task.pMisCnt,  &pMsg->task.idInfo_taskSender,  pSharedObj  );
								}
#endif

									//  2009/05/12
									exitTransforms(pProcInfo, pTask);

									//
									for (index = 0; index < pTask->usCntLimit_mems_from; index++)
									{
										//  exitTaskAvFrom_video(  pProcInfo,  &pContent->transferAvReplyInfo.myTask.pMems_from[index]  );									 
										//  exitTaskAvFrom_audio(  pProcInfo,  &pContent->transferAvReplyInfo.myTask.pMems_from[index]  );									 
									}

									//
									if (pTask->mixer.pOutputQ2)
									{
										exitQyQ2(pTask->mixer.pOutputQ2);
										MACRO_safeFree(pTask->mixer.pOutputQ2);
									}
									if (pTask->photomosaic.pOutputQ2)
									{       //  2009/07/26
										exitQyQ2(pTask->photomosaic.pOutputQ2);
										MACRO_safeFree(pTask->photomosaic.pOutputQ2);
									}

									//  2009/05/31
									MACRO_safeFree(pTask->audio.pMsgTask_toTransform);
									MACRO_safeFree(pTask->video.pMsgTask_toTransform);
									//  2009/02/16
									if (pTask->pMems_from) free(pTask->pMems_from);
								}
								//
								break;
							default:
								break;
						}

					}
					break;
				default:
					break;
			}

			*/

		errLabel:

			//qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo->who_showInfo, 0, _T(""), _T(""), _T("exitMisMsg leaves"));


			return;
		}

	}
}
