using System;
using System.Collections.Generic;
using System.Text;

namespace qy
{
    partial class qyFuncs
{
		public static unsafe int findTalker(CCtxQyMc pQyMcParam, MSGR_ADDR* pAddr, uint unused, ref object phWnd)
		{
			//AFX_MANAGE_STATE(AfxGetStaticModuleState());

			int iErr = -1;
			CCtxQyMc pQyMc = (CCtxQyMc)pQyMcParam;
			
			COMMON_PARAM commonParam1;
			MIS_CNT pMisCnt = null;
			int iRet;
			object  hWnd = null;
			CCtxQmc pProcInfo = pQyMc.get_pProcInfo();

			/*
			if (!pAddr) return -1;

			//  2012/04/23
			assert(!pAddr->uiTranNo_shadow);

			//
			if (!(pMisCnt = getMisCntByName(pProcInfo, pAddr->misServName))) goto errLabel;

			MACRO_makeCommonParam3((void*)pAddr, (void*)unused, 0, commonParam1);
			iRet = qTraverse(&pMisCnt->talkingFriendQ, tmpHandler_findTalker, 0, &commonParam1);
			if (iRet <= 0) goto errLabel;
			hWnd = (HWND)commonParam1.p2;
			*/

			iErr = 0;
		errLabel:
			if (0==iErr)
			{
				phWnd = hWnd;
			}
			return iErr;
		}

		public static unsafe  int findTalker(CCtxQyMc pQyMcParam, MIS_CNT pMisCntParam, QY_MESSENGER_ID* pIdInfo, ref object phWnd)
		{
			//AFX_MANAGE_STATE(AfxGetStaticModuleState());

			int iErr = -1;
			CCtxQyMc pQyMc = (CCtxQyMc)pQyMcParam;
			MIS_CNT pMisCnt = (MIS_CNT)pMisCntParam;
			COMMON_PARAM commonParam1;
			int iRet;
			object hWnd = null;

			/*
			if (!pMisCnt || !pIdInfo || !pIdInfo->ui64Id) return -1;

			MACRO_makeCommonParam3((void*)pMisCnt->cfg.misServName, (void*)pIdInfo, 0, commonParam1);
			iRet = qTraverse(&pMisCnt->talkingFriendQ, tmpHandler_findTalker_simple, 0, &commonParam1);
			if (iRet <= 0) goto errLabel;
			hWnd = (HWND)commonParam1.p2;
			*/

			iErr = 0;
		errLabel:
			if (0==iErr)
			{
				phWnd = hWnd;
			}
			return iErr;
		}


		//
		public static unsafe  int dlgTalk_qPostMsg(object hDlgTalk, IntPtr pQElem, uint size)
		{
			int iErr = -1;
			/*
			MC_VAR_isCli* pProcInfo = QY_GET_procInfo_isCli();
			if (!pProcInfo) return -1;

			CHelp_getDlgTalkVar help_getDlgTalkVar;
			DLG_TALK_var* pVar = (DLG_TALK_var*)help_getDlgTalkVar.getVar(hDlgTalk);
			if (!pVar)
			{
				//  2014/01/24	 
				qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), _T("Gui"), NULL, _T(""), _T(""), _T("dlgTalk_qPostMsg failed,  getDlgTalkVar is null"));
				return -1;
			}
			if (!pVar->m_pProcessQ)
			{
				//  2014/01/24	 
				qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo->who_showInfo, NULL, _T(""), _T(""), _T("dlgTalk_qPostMsg failed,  pVar->m_ProcessQ is null"));
				return -1;
			}
			if (!pQElem || !size) return -1;

# ifdef  __DEBUG__
			//traceLog(  _T(  "dlgTalk_qPostMsg not finished"  )  );
#endif

			MIS_MSGU* pMsg = (MIS_MSGU*)pQElem;
			switch (pMsg->uiType)
			{
				case CONST_misMsgType_task:
					if (pMsg->task.iTaskId)
					{
						switch (pMsg->task.uiTaskType)
						{
							case CONST_imTaskType_sendFile:
							case CONST_imTaskType_recvFile:
								{
									PARAM_PROC_ROW param;
									memset(&param, 0, sizeof(param));
									param.iTaskId = pMsg->task.iTaskId;
									qRemoveMsg(pVar->m_pProcessQ, tmpHandler_bRemoveMsgInProcessQ, hDlgTalk, &param);
								}
								break;
							default:
								{
									//  2016/02/17					  
									MIS_MSG_TASK* tmppMsg = findTaskInProcessQ(pVar, pMsg->task.iTaskId);
									//					  
									if (tmppMsg)
									{
										if (tmppMsg->iStatus == pMsg->task.iStatus) return -1;
										//
										if (bTaskAlive(tmppMsg->iStatus)) return -1;
										//
										if (tmppMsg->iStatus == CONST_imTaskStatus_autoCanceledByReceiver)
										{
											PARAM_PROC_ROW param;
											memset(&param, 0, sizeof(param));
											param.iTaskId = pMsg->task.iTaskId;
											qRemoveMsg(pVar->m_pProcessQ, tmpHandler_bRemoveMsgInProcessQ, hDlgTalk, &param);
											break;
										}
										//
										return -1;
									}
									break;

								}
						}
					}
					//
					IM_CONTENTU* pContent;
					pContent = M_getMsgContent(pMsg->task.ucFlg, &pMsg->talk.data);
					switch (pContent->uiType)
					{
						case CONST_imCommType_transferAvInfo:
							{
								CQyMalloc mallocObj_pMsgTask;
								MIS_MSG_TASK* pMsgTask = (MIS_MSG_TASK*)mallocObj_pMsgTask.mallocf(sizeof(MIS_MSG_TASK));
								//
								if (sizeof(TRANSFER_AV_task) > sizeof(IM_CONTENTU))
								{
									showInfo_open(0, 0, _T("dlgTalk_qPostMsg failed: sizeof(  TRANSFER_AV_task  ) too big"));
									return -1;
								}
								int maxLen = offsetof(MIS_MSG_TASK, data) + offsetof(MIS_MSG_routeTalkData, buf) + sizeof(TRANSFER_AV_task);
								memset(pMsgTask, 0, maxLen);
								//
								int msgLen = offsetof(MIS_MSG_TASK, data) + pMsg->task.lenInBytes;
								memcpy(pMsgTask, &pMsg->task, msgLen);
								//
								IM_CONTENTU* pContent_new = M_getMsgContent(pMsgTask->ucFlg, &pMsgTask->data);
								//
								pContent_new->transferAvInfo.tmp_usSubtype = CONST_transferAvInfo_subtype_task;
								//
								pMsgTask->lenInBytes = offsetof(MIS_MSG_routeTalkData, buf) + sizeof(TRANSFER_AV_task);
								//
								msgLen = offsetof(MIS_MSG_TASK, data) + pMsgTask->lenInBytes; ;
								return  ::qPostMsg(pMsgTask, msgLen, pVar->m_pProcessQ);

							}
							break;
						default:
							break;
					}
					//
					break;
				case CONST_misMsgType_talk:
					break;
				case CONST_misMsgType_taskStatus:
# ifdef  __DEBUG__
					traceLog(_T("dlgTalk_qPostMsg: msgTaskStatus"));
#endif
					break;
				case CONST_misMsgType_applyForTalkerShadow_qmc:
					break;
				default:
# ifdef  __DEBUG__
					traceLog(_T("dlgTalk_qPostMsg: unexpected msgType, %d"), pMsg->uiType);
#endif
					break;
			}
			

			return  ::qPostMsg(pQElem, size, pVar->m_pProcessQ);
			*/

		errLabel:
			return iErr;
		}



	}
}
