using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

partial class Consts
{
	public const int CONST_bufSize_4096 = 4096;
}


namespace qy
{
	partial class qyFuncs
	{
		public unsafe struct RESULT_startChannel
		{
			public fixed char respHint[Consts.CONST_cntof_hint];
		}

		unsafe struct TMP_buf4096
		{
			public fixed byte buf[Consts.CONST_bufSize_4096];
		}
		//
		public static unsafe int tryToStartChannel(MIS_CNT pMisCnt, MIS_CHANNEL pChannel, ref RESULT_startChannel result)
		{
			int iErr = -1;


			if (null == pMisCnt) return -1;
			CCtxQmc pProcInfo = (CCtxQmc)pMisCnt.pProcInfoParam;
			if (null == pProcInfo) return -1;
			CCtxQyMc pQyMc = pProcInfo.pQyMc;

			//
			//QM_dbFuncs* p_g_dbFuncs = pQyMc.p_g_dbFuncs;


			//
			//char buf[4096];
			TMP_buf4096 buf4096;
			uint len;
			using (CQyMalloc mallocObj = new CQyMalloc())
			{
				QY_BUF buf_help;
				byte* pbuf_help = (byte*)&buf_help;
				mymemset((IntPtr)pbuf_help, 0, sizeof(QY_BUF));
				buf_help.len = Consts.CONST_bufSize_4096;
				if (null == (buf_help.data = (byte*)mallocObj.mallocf((int)buf_help.len))) return -1;

				
				byte* ptr;
				AUTH_RESP_MIS authResp;
				QY_MESSENGER_ID idInfo;
				QY_MESSENGER_INFO obj;
				

				if (pChannel.bSessionOpen) return 0;   //  

				//QM_dbFuncs* pDbFuncs = pQyMc.p_g_dbFuncs;
				//if (!pDbFuncs) goto errLabel;
				//QM_dbFuncs & g_dbFuncs = *pDbFuncs;

				pChannel.status.ulbNeedVerified = false;
				pChannel.status.ulbAuthed = false;

				//  ´ò¿ªÁ¬½Ó						   	 
				len = Consts.CONST_bufSize_4096;  // sizeof(buf);
				string str_servIp;
				fixed (byte* p = pMisCnt.server.ip) {
					str_servIp = mytoString(p);
				}
				if (0!=qnmOpenSession_mis(str_servIp, pMisCnt.server.port, ref pProcInfo.authInfo, 0, pChannel.uiType, null, pQyMc.iServiceId, qnmVerStr(pQyMc.iServiceId), ref pChannel.commEncCtx, ref pChannel.session, ref pChannel.sock, pQyMc.cfg.to, (byte*)buf4096.buf, &len)) goto errLabel;
				pChannel.bSessionOpen = true;

				if (0!=decryptData(ref pChannel.commEncCtx, ref buf_help, buf4096.buf, &len)) goto errLabel;

				byte* pauthResp = (byte*)&authResp;
				mymemset((IntPtr)pauthResp, 0, sizeof(AUTH_RESP_MIS));
				ptr = buf4096.buf;
				if (0!=stream2Data(&ptr, &len, filterStream_is, tmpHandler_stream2AuthResp_mis, null, &authResp)) goto errLabel;
				if (!isRcOk(pChannel.session.usLastRespCode_i))
				{
					if (pChannel.uiType == Consts.CONST_channelType_talking)
					{
						//  2011/08/15
						fixed (char* respHint = result.respHint)
						{
							safeWcsnCpy(authResp.wBuf_hint, respHint, Consts.CONST_cntof_hint);
						}
						//
						if (pChannel.session.usLastRespCode_i == Consts.CONST_qyRc_anotherLogonExists)
						{
							if (pQyMc.bLogon)
							{
								//showNotification(pMisCnt, 0, 0, 0, 0, 0, CQyString(getResStr(0, &pQyMc.cusRes, CONST_resId_anotherLogon)) + authResp.wBuf_hint);
								//waitToQuit_isCli(pProcInfo, 5000);
							}
							goto errLabel;
						}
					}
					if (!isRcNeedVerified(pChannel.session.usLastRespCode_i))
					{
						//traceLogA("tryToStartChannel failed: access denied");
						goto errLabel;
					}
					//traceLogA("get hint from server: [%S]", authResp.wBuf_hint);
					pChannel.status.ulbNeedVerified = true;
				}
				if (isRcOk(pChannel.session.usLastRespCode_i)) pChannel.status.ulbAuthed = true;

				if (!pChannel.status.ulbAuthed)
				{
					//traceLogA("ulbAuthed is false"); 
					goto errLabel;
				}
				if (!bMessengerIdValid(&authResp.idInfo)) goto errLabel;

				idInfo.ui64Id = authResp.idInfo.ui64Id;

				{
					//_sntprintf(pProcInfo.who_showInfo, mycountof(pProcInfo.who_showInfo), _T("%s%I64u"), pQyMc.who_showInfo, idInfo.ui64Id);
					//set_who_showInfo(pProcInfo.who_showInfo);
					string str = string.Format("{0} {1}", pQyMc.str_who_showInfo, idInfo.ui64Id);
					pProcInfo.str_who_showInfo = str;
					traceLog("tryTostartChannel ", str);
				}

				//
				if (pChannel.uiType != Consts.CONST_channelType_talking)
				{   //  2008/03/17, 
					iErr = 0; goto errLabel;
				}

				//  2011/02/02
				if (0!=authResp.uiLogonId)
				{
					if (pProcInfo.authInfo.uiLogonId != authResp.uiLogonId)
					{
						pProcInfo.authInfo.uiLogonId = authResp.uiLogonId;
					}
				}
				//
				if (0!=authResp.usAppAvLevel_daemon)
				{
					if (pQyMc.usAppAvLevel_daemon != authResp.usAppAvLevel_daemon)
					{
						pQyMc.usAppAvLevel_daemon = authResp.usAppAvLevel_daemon;  //  2011/10/22
					}
				}
				//  2009/10/11
				if (pQyMc.ucbDaemonDemo != authResp.ucbDaemonDemo)
				{
					pQyMc.ucbDaemonDemo = authResp.ucbDaemonDemo;
				}
				//		
				//  2017/06/21
				if (pQyMc.usSubSystemId_daemon != authResp.usSubSystemId_daemon)
				{
					pQyMc.usSubSystemId_daemon = authResp.usSubSystemId_daemon;
				}

				//  2016/08/10
				if (pChannel.uiType == Consts.CONST_channelType_talking)
				{
					//safeWcsnCpy(authResp.clientWelcomeMsg, pProcInfo.cfg.clientWelcomeMsg, mycountof(pProcInfo.cfg.clientWelcomeMsg));
				}

				//
				if (!pQyMc.bLogon)
				{       //  2010/03/10
					iErr = 0; goto errLabel;
				}

				/*
				//
				if (!bObjDbAvail(getProcedObjDb(pQyMc, 0, pQyMc.iDsnIndex_mainSys))) goto errLabel;
				if (!db.getAvailableDb(pQyMc.iDsnIndex_mainSys)) goto errLabel;
				pDb = db.m_pDbMem->pDb;

				if (!g_dbFuncs.pf_bGetMessengerInfoBySth(pQyMc.p_g_dbFuncs, pDb, pSci->cfg.iDbType, getResTable(0, &pQyMc.cusRes, CONST_resId_fieldIdTable), pMisCnt->cfg.misServName, &idInfo, 0, &obj, NULL, NULL, NULL))
				{
					memset(&obj, 0, sizeof(obj));

					lstrcpyn(obj.misServName, pMisCnt->cfg.misServName, mycountof(obj.misServName));
					obj.uiType = CONST_objType_me;
					obj.idInfo.ui64Id = idInfo.ui64Id;

					if (pProcInfo.recoverMessenger(pDbFuncs, pDb, pSci->cfg.iDbType, getResTable(0, &pQyMc.cusRes, CONST_resId_fieldIdTable), &obj, NULL, 0, FALSE, &pProcInfo.schedulerQ))
					{
						//  2013/01/29
						qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), pProcInfo.who_showInfo, 0, _T(""), _T(""), _T("recoverMessenger failed"));
						goto errLabel;
					}

				}


				if (g_dbFuncs.pf_updateImObj_me(pDb, pSci->cfg.iDbType, &obj)) goto errLabel;


				if (pQyMc.usMaxVideoConferenceMems != authResp.usMaxVideoConferenceMems) pQyMc.usMaxVideoConferenceMems = authResp.usMaxVideoConferenceMems;
				//
				if (pQyMc.ucDays_left != authResp.ucDays_left) pQyMc.ucDays_left = authResp.ucDays_left;  //  2010/03/22
																											//
				uint uiMaxTimeInS_videoConference = bQmFreeVer(pQyMc) ? pQyMc.uiMaxTimeInS_videoConference_freeVer : pQyMc.uiMaxTimeInS_videoConference_general;
				if (pQyMc.uiMaxTimeInS_videoConference != uiMaxTimeInS_videoConference) pQyMc.uiMaxTimeInS_videoConference = uiMaxTimeInS_videoConference;
				//
				if (memcmp(&pMisCnt->idInfo, &idInfo, sizeof(pMisCnt->idInfo))  )  memcpy(&pMisCnt->idInfo, &idInfo, sizeof(pMisCnt->idInfo)  );


				QM_OBJQ_MEM mem;

				memset(&obj, 0, sizeof(obj));

				lstrcpyn(obj.misServName, pMisCnt->cfg.misServName, mycountof(obj.misServName));
				obj.uiType = CONST_objType_me;
				obj.idInfo.ui64Id = idInfo.ui64Id;

				//  ÕâÀï·Åµ½¹ÜÀí¶ÓÁÐÖÐÈ¥
				if (procQmObjQ(pSci, (QM_OBJQ*)pMisCnt->pObjQ, pDb, pQyMc.cfg.db.iDbType, obj.uiType, &obj, &mem)) goto errLabel;

				QMEM_MESSENGER_CLI* pQMem;
				pQMem = (QMEM_MESSENGER_CLI*)mem.pQMemObj;

				//  (  (  QMEM_MESSENGER_CLI  *  )mem.pQMemObj  )->usRunningStatus  =  CONST_usRunningStatus_online;
				pQMem->usRunningStatus = CONST_usRunningStatus_online;

				pMisCnt->status.usRunningStatus = CONST_usRunningStatus_online; //  2007/08/31

				int i;  //  2009/10/11
				for (i = 0; i < mycountof(pMisCnt->channels); i++)
				{
					memset(&pMisCnt->channels[i].status.netStat, 0, sizeof(pMisCnt->channels[i].status.netStat)  );
			}

			//  ÏÂÃæ£¬ÒªÆô¶¯Ò»Ð©²ßÂÔ£¬´¥·¢ÔÚÁ¬½ÓÉÏ·þÎñÆ÷ºó£¬ÐèÒª×öµÄÒ»Ð©¶¯×÷
			//
			QY_MESSENGER_REGINFO regInfo;
			//	 
			if (bMeInfoNeedReg(pDb, pQyMc.cfg.db.iDbType, pMisCnt, &regInfo)) pMisCnt->ucTriesToReg += 2;
			//
			pMisCnt->ucbNeedSndDevInfo = TRUE;      //  2007/08/03
													//
			pMisCnt->bIntervalParamsGot = FALSE;        //  2007/09/20,  ÕâÀï£¬Í¨¹ý½«¿ØÖÆ±äÁ¿Çå0¿ÉÒÔÈÃÍ¨µÀÁ¬Í¨Ö®ºó£¬ÖØÐÂÏÂÔØÒ»ÏÂÉèÖÃ¡£
			pMisCnt->bToPathsRetrieved = FALSE;     //  2008/02/09


# ifndef  __NOTSUPPORT_DB__
			if (!pQMem->talkerDesc[0]) {
				if (!g_dbFuncs.pf_bGetMessengerInfoBySth(pQyMc.p_g_dbFuncs, pDb, pSci->cfg.iDbType, getResTable(0, &pQyMc.cusRes, CONST_resId_fieldIdTable), pMisCnt->cfg.misServName, &pMisCnt->idInfo, 0, NULL, &regInfo, NULL, NULL)) goto errLabel;
				if (!regInfo.addr.idInfo.ui64Id) {
					regInfo.addr.idInfo.ui64Id = idInfo.ui64Id;
				}

				MY_REG_DESC desc;
				if (regInfo2Desc(0, &regInfo, &desc, pQMem->talkerDesc, mycountof(pQMem->talkerDesc), pQMem->displayName, mycountof(pQMem->displayName))) goto errLabel;
			}
#endif
			safeWcsnCpy(authResp.talkerDesc, pQMem->talkerDesc, mycountof(pQMem->talkerDesc));

			if (updateMeDisplayInfo(pProcInfo, pMisCnt, NULL, pQMem->talkerDesc, pQMem->displayName)) goto errLabel;

# ifdef  __DEBUG__
			traceLogA("channel start, idInfo %I64u", pMisCnt->idInfo.ui64Id);

			test_myDb(_T("tryToStartChannel"));
#endif

				*/
		}

iErr = 0;
errLabel:

if (iErr!=0)
{
	if (pChannel.bSessionOpen)
	{
		qnmCloseSession_msg(ref pChannel.session, ref pChannel.sock, pQyMc.cfg.to);
		pChannel.bSessionOpen = false;
	}
}
			

				return iErr;
			}


		//
		static void mcThreadProc_isCli(object lpParameter)
		{
			int iErr = -1;
			
			CCtxQyMc pQyMc = (CCtxQyMc)lpParameter;
			int iServiceId = Consts.CONST_qyServiceId_mis;
			//QY_SERVICEGUI_INFO* pSci = getServiceGuiInfo(pQyMc, iServiceId);
			//
			CCtxQmc pProcInfo = pQyMc.get_pProcInfo();
			int i;
			bool bInited = false;
			uint dwThreadDaemonId;
			int loopCtrl = 0;
			//  QY_LOGICAL_SERVER				tmpCnt;
			QM_dbFuncs pDbFuncs = pQyMc.p_g_dbFuncs;
			if (null==pDbFuncs) goto errLabel;
			QM_dbFuncs  g_dbFuncs = pDbFuncs;

			MIS_CNT pMisCnt = pProcInfo.pMisCnt;
			if (pMisCnt == null) return;


			//traceLogA("mcThreadProc_mis enters");

			/*

			for (; ; Sleep(2500))
			{           //  ÕâÀïÏÈµÈ´ýÓÃ»§µÇÂ½ÁË£¬ÔÙ¿ªÊ¼×öÏÂÃæµÄÊÂ
				if (pQyMc->bQuit) goto errLabel;
				if (!pQyMc->bLogon) continue;       //  2007/05/30

#if  0
		  if  (  !myStr2TChar(  pQyMc->curUsrInfo.name,  pProcInfo->authInfo.messengerName,  mycountof(  pProcInfo->authInfo.messengerName  )  )  )  {
			  traceLogA(  "ÓÃ»§ÃûÌ«³¤£¬·Å²»½øauthInfo.messengerNameÀïÈ¥"  );
			  goto  errLabel;
		  }
#endif
				break;
			}

			//
			if (!pQyMc->bChkQyMcEnv_mis())
			{
# ifdef  __DEBUG__
				traceLog(_T("mcThreadProc_isCli failed, bChkQyMcEnv_mis failed"));
#endif
				goto errLabel;
			}
			


			
			//for  (  i  =  0;  i  <  mycountof(  pProcInfo->misCnts  );  i  ++  )  
			for (i = 0; i < pProcInfo->ucCnt_misCnts; i++)
			{
				MIS_CNT* pMisCnt = getMisCntByIndex(0, pProcInfo, i);//&pProcInfo->misCnts[i];
				if (!pMisCnt) continue;
				MIS_CHANNEL* pChannel = NULL;

				if (pMisCnt->cfg.dynCfg.cnt.usCntPort)
				{
					//
					if (!(pChannel = getChannelByType(pMisCnt, CONST_channelType_talking))) goto errLabel;
					//
					//  pMisCnt->pAuthInfo  =  &pProcInfo->authInfo;

					clearQySock(&pChannel->sock);

# ifndef  __NOTSUPPORT_DB__
					{     //  »ñÈ¡±¾µØµÄqqºÅ
						CQnmDb db;
						QY_MESSENGER_INFO messengerInfo;

						if (bObjDbAvail(getProcedObjDb(pQyMc, 0, pQyMc->iDsnIndex_mainSys))
							&& db.getAvailableDb(pQyMc->iDsnIndex_mainSys)
							&& db.m_pDbMem->iDbType != CONST_dbType_myDb)
						{
							if (g_dbFuncs.pf_bGetMeInfoBySth(db.m_pDbMem->pDb, pSci->cfg.iDbType, pMisCnt->cfg.misServName, &messengerInfo)) pMisCnt->idInfo.ui64Id = messengerInfo.idInfo.ui64Id;
							//
							g_dbFuncs.pf_bClearupDeletedImObjs_isClient(pMisCnt, db.m_pDbMem->pDb, pSci->cfg.iDbType);
							//
							qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), _T("IsClient"), 0, _T(""), _T(""), _T("Start to moveTask2His"));
							//
							g_dbFuncs.pf_bMoveTask2His(pMisCnt, db.m_pDbMem->pDb, pSci->cfg.iDbType);
							//
							qyShowInfo1(CONST_qyShowType_qwmComm, 0, (""), _T("IsClient"), 0, _T(""), _T(""), _T("MoveTask2His finished"));
							//
							g_dbFuncs.pf_bStatImTasks(pProcInfo, pMisCnt, db.m_pDbMem->pDb, pSci->cfg.iDbType);
						}
					}
#endif
				}
			}
			*/


			pProcInfo.status.ulbThreadProcInited = true;   //  2007/09/02, ¸æÖªgui¿ÉÒÔÆô¶¯´°¿ÚÁË
														   //traceLogA("mcThreadProc_mis inited");

			//
			pProcInfo.bQuit_threadProc_isCli = false;
			pProcInfo.status.threadsStatus = new QMC_threads_status();

			//
			pProcInfo.hThread_mgr = new Thread(new ParameterizedThreadStart(mcThreadProc_mis_mgr));
			pProcInfo.hThread_mgr.Start();
			//
			/*
			pProcInfo->hThread_robot = CreateThread(NULL, 0, mcThreadProc_mis_robot, pSci, CREATE_SUSPENDED, &dwThreadDaemonId);
			if (!pProcInfo->hThread_robot) goto errLabel;
			pProcInfo->dwThreadId_robot = dwThreadDaemonId;
			if (ResumeThread(pProcInfo->hThread_robot) == -1) goto errLabel;
			//
			pProcInfo->hThread_display = CreateThread(NULL, 0, mcThreadProc_mis_display, pSci, CREATE_SUSPENDED, &dwThreadDaemonId);
			if (!pProcInfo->hThread_display) goto errLabel;
			pProcInfo->dwThreadId_display = dwThreadDaemonId;
			if (ResumeThread(pProcInfo->hThread_display) == -1) goto errLabel;
			//
			pProcInfo->hThread_work = CreateThread(NULL, 0, mcThreadProc_mis_work, pSci, CREATE_SUSPENDED, &dwThreadDaemonId);
			if (!pProcInfo->hThread_work) goto errLabel;
			pProcInfo->dwThreadId_work = dwThreadDaemonId;
			if (ResumeThread(pProcInfo->hThread_work) == -1) goto errLabel;
			*/
			//
			pProcInfo.hThread_scheduler = new Thread(new ParameterizedThreadStart(mcThreadProc_mis_scheduler));
			pProcInfo.hThread_scheduler.Start();
			/*
			 //  
			pProcInfo->hThread_media = CreateThread(NULL, 0, mcThreadProc_mis_media, pSci, CREATE_SUSPENDED, &dwThreadDaemonId);
			if (!pProcInfo->hThread_media) goto errLabel;
			pProcInfo->dwThreadId_media = dwThreadDaemonId;
			if (ResumeThread(pProcInfo->hThread_media) == -1) goto errLabel;
			//
			pProcInfo->hThread_realTimeMedia = CreateThread(NULL, 0, mcThreadProc_mis_realTimeMedia, pSci, CREATE_SUSPENDED, &dwThreadDaemonId);
			if (!pProcInfo->hThread_realTimeMedia) goto errLabel;
			pProcInfo->dwThreadId_realTimeMedia = dwThreadDaemonId;
			if (ResumeThread(pProcInfo->hThread_realTimeMedia) == -1) goto errLabel;
			//  2016/12/26
			pProcInfo->hThread_rtOp = CreateThread(NULL, 0, mcThreadProc_mis_rtOp, pSci, CREATE_SUSPENDED, &dwThreadDaemonId);
			if (!pProcInfo->hThread_rtOp) goto errLabel;
			pProcInfo->dwThreadId_rtOp = dwThreadDaemonId;
			if (ResumeThread(pProcInfo->hThread_rtOp) == -1) goto errLabel;
			*/

			//

			//
			for (; !pQyMc.bQuit&&pQyMc.bLogon; loopCtrl++, Thread.Sleep(1000))
			{

				if (0==(loopCtrl % 10))
				{   //  ÕâÀïÏÈÓÃÕâ¸öÆµÂÊ£¬Ó¦¸Ã¼ÓÉÏºÍserverÁªÏµ¶ÏµÄÊ±ºò£¬Ò²Òª¼´Ê±ÖØÐÂÁ¬½Ó
					//for  (  i  =  0;  i  <  mycountof(  pProcInfo->misCnts  );  i  ++  )  

						MIS_CHANNEL pChannel = getChannelByType(pMisCnt, Consts.CONST_channelType_talking);
						if (null==pChannel) continue;


						//  ÉÏÃæ²âÊÔÍêcorrectCntºó£¬²»ÄÜcontinue. ÒªÁ¢¼´ÅÐ¶ÏÏÂÃæµÄ×´Ì¬Î»¡£
						//
						if (pMisCnt.cfg.dynCfg.cnt.usCntPort!=0)
						{

							if (pProcInfo.status.threadsStatus.ulbMgrQuit
								|| pProcInfo.status.threadsStatus.ulbWorkQuit
									 || pProcInfo.status.threadsStatus.ulbDisplayQuit
										 || pProcInfo.status.threadsStatus.ulbRobotQuit
											 || pProcInfo.status.threadsStatus.ulbSchedulerQuit
												 || pProcInfo.status.threadsStatus.ulbMediaQuit
												 || pProcInfo.status.threadsStatus.ulbRealTimeMediaQuit
												 || pProcInfo.status.threadsStatus.ulbRtOpQuit
													 || pProcInfo.status.threadsStatus.ulbLogQuit
															//|| pMisCnt.status.ulbSeriousErr
															)
							{
								showInfo_open(IntPtr.Zero,"mcThreadProc_isCli", "mcThreadProc_mis will quit, because sub thread has quitted.");
								goto errLabel;
							}


							//
							if (!pChannel.bSessionOpen)
							{
								//  ´ò¿ªÁ¬½Ó
								startChannel(pProcInfo, pMisCnt, getChannelByType(pMisCnt, 0), "");
							}

							if (pChannel.hThread_io!=null)
							{   //  ÕâÀïÒª¿´Ò»ÏÂÊÇ·ñÓÐÏß³ÌÍË³öÁË£¬µ±Í¨ÐÅÖÐ¶Ï»òÆäËûÒì³£Ô­ÒòÊ±£¬Ïß³Ì»áÍË³ö
								waitForThread(ref pChannel.hThread_io, 500);
								if  (null==pChannel.hThread_io)
                            {
								string str = string.Format("channal {0} closed", qyGetDesByType1(CONST_channelTypeTable, pChannel.uiType));
								showInfo_open(null, "mcThreadProc_isCli", str);
                            }

							/*
								if (null==pChannel.hThread_io)
								{

									//  ÏÂÃæÎªÍ¨ÖªÎÒ½Úµã±ä³ÉÀëÏß×´Ì¬
									//

									QM_OBJQ_MEM mem;

									if (!findQMemByKey(0, (QM_OBJQ*)pMisCnt->pObjQ, &pMisCnt->idInfo, &mem))
									{
										//	 
										((QMEM_MESSENGER_CLI*)mem.pQMemObj)->usRunningStatus = CONST_usRunningStatus_offline;

										pMisCnt->status.usRunningStatus = CONST_usRunningStatus_offline;

										lstrcpyn(pMisCnt->displayName, getResStr(0, &pQyMc->cusRes, CONST_resId_objIdStr_me), mycountof(pMisCnt->displayName));

										//  Ë¢ÐÂÒ»ÏÂÎÒ½Úµã£¬ 2007/06/20
										updateMeDisplayInfo(pProcInfo, pMisCnt, NULL, NULL, NULL);
									}

								}
							*/

							}

						}
					

				}
			}
			


			iErr = 0;

		errLabel:

			//
			pProcInfo.bQuit_threadProc_isCli = true;

			//							
			{ 				
				MIS_CHANNEL pChannel = getChannelByType(pProcInfo.pMisCnt, Consts.CONST_channelType_talking);

				//
				//Console.WriteLine("waitForChannel");
				waitForChannel(pProcInfo, pProcInfo.pMisCnt, 0, true);
			}

			//
			myEventSet(pProcInfo.mgrQ.hEvent);
			mySemaRelease(pProcInfo.schedulerQ.hSemaTrigger, 1);

	
			//
			MACRO_qyNullThread(ref pProcInfo.hThread_rtOp);    //  2016/12/26	 
			MACRO_qyNullThread(ref pProcInfo.hThread_realTimeMedia);   //  2008/04/25
			MACRO_qyNullThread(ref pProcInfo.hThread_media);           //  2008/03/15
			MACRO_qyNullThread(ref pProcInfo.hThread_scheduler);
			MACRO_qyNullThread(ref pProcInfo.hThread_work);
			MACRO_qyNullThread(ref pProcInfo.hThread_display);
			MACRO_qyNullThread(ref pProcInfo.hThread_robot);           //  2007/07/04
			MACRO_qyNullThread(ref pProcInfo.hThread_mgr);


			//
# if  DEBUG
			Console.WriteLine("mcThreadProc_mis leaves");
#endif
			

			//return iErr;
			return;
		}


		public static bool bChkMessengerChannelsReady(CCtxQyMc pQyMc)
		{
			bool bRet = false;
			//QY_SERVICEGUI_INFO* pSci = (QY_SERVICEGUI_INFO*)getServiceGuiInfo(pQyMc, pQyMc->iServiceId);
			//if (!pSci) goto errLabel;
			CCtxQmc pVar = (CCtxQmc)pQyMc.get_pProcInfo();
			if (null == pVar) return false;
			int i;
			MIS_CHANNEL pChannel = null;
			bool bMediaReady = false;
			bool bRtMediaReady = false;
			bool bRtOpReady = false;

				MIS_CNT pMisCnt = pVar.pMisCnt;
			if (null == pMisCnt) goto errLabel;
				//
				if (pMisCnt.cfg.dynCfg.cnt.usCntPort!=0)
				{
					if (bChannelOk(getChannelByType(pMisCnt, Consts.CONST_channelType_media))) bMediaReady = true;
					if (bChannelOk(getChannelByType(pMisCnt, Consts.CONST_channelType_realTimeMedia))) bRtMediaReady = true;
					if (bChannelOk(getChannelByType(pMisCnt, Consts.CONST_channelType_rtOp))) bRtOpReady = true;
				}
			

			bRet = true;

		errLabel:

			if (bRet)
			{
				if (pVar!=null)
				{
					if (pVar.av.bMediaChannelReady != bMediaReady) pVar.av.bMediaChannelReady = bMediaReady;
					if (pVar.av.bRealtimeMediaChannelReady != bRtMediaReady) pVar.av.bRealtimeMediaChannelReady = bRtMediaReady;
					if (pVar.av.bRtOpChannelReady != bRtOpReady) pVar.av.bRtOpChannelReady = bRtOpReady;
				}
			}

			return bRet;

		}


		//
		public static unsafe int postMsg2OutputQ_mc(MIS_CNT pMisCnt, MIS_MSGU* pMsg, uint msgLen, MIS_CHANNEL pChannel)
		{
			int iErr = -1;

			if (null==pMisCnt)
			{
				traceLogA("postMsg2OutputQ_mc failed: pMisCnt is null");
				return -1;
			}

			CCtxQmc pProcInfo = (CCtxQmc)pMisCnt.pProcInfoParam;
			if (null==pProcInfo) return -1;
			CCtxQyMc pQyMc = (CCtxQyMc)pProcInfo.pQyMc;
			//QY_SERVICEGUI_INFO* pSci = (QY_SERVICEGUI_INFO*)pProcInfo->pSgiParam;
			//TCHAR tHintBuf[255 + 1] = _T("");
			TMP_tHintBuf tHintBuf;
			int tmpiRet = -1;
			//  CQyQ2Help					q2Help;


			if (0!=(tmpiRet = q2PostMsgAndTrigger((IntPtr)pMsg, msgLen, pChannel.outputQ2)))
			{

				if (tmpiRet != Consts.CONST_qyRet_qFull)
				{
					//_sntprintf(tHintBuf, mycountof(tHintBuf), _T("qPostMsgAndTrigger failed."));
					goto errLabel;
				}
				else
				{
					//_sntprintf(tHintBuf, mycountof(tHintBuf), _T("outputQ of %s is full. "), qyGetDesByType1(CONST_channelTypeTable, pChannel->uiType));
					switch (pChannel.uiType)
					{       //  2008/05/18, ÎªÁË±ÜÃâÊä³ö¶ÂÈû²»ÄÜÆð×÷ÓÃÁË£¬ÕâÀïÏÈ²ÉÈ¡Çå¿Õ²Ù×÷¡£×¢Òâ£ºÖ»ÄÜ¶ÔÊÓÆµµÈÊý¾Ý²»ÖØÒª£¬µ«ÊÇ×¢ÖØÊµÊ±ÐÔµÄ¶ÓÁÐ¡£
						case Consts.CONST_channelType_media:
						case Consts.CONST_channelType_realTimeMedia:
							//_sntprintf(tHintBuf, mycountof(tHintBuf), _T("%semptyQ now."), tHintBuf);
							emptyQ2(pChannel.outputQ2);
							break;
						default:
							break;
					}
					//  2015/08/22. 队列满时，不能退出，应接着触发发送. 在q2PostMsgAndTrigger已经触发
				}
			}
			if (pChannel.outputQ2.ucbTriggerErr) q2AvoidTriggerTooHigh(null, pChannel.outputQ2);

			iErr = 0;

		errLabel:

			if (iErr!=0 || tHintBuf.tHintBuf[0]!=0)
			{
				string str=string.Format(("postMsg2OutputQ_mc: {0}"), tHintBuf);
				qyShowInfo1(Consts.CONST_qyShowType_debugWarning, null, (""), pProcInfo.str_who_showInfo, null, (""), "",str); 
					
			}

			return iErr;
		}

	}
}

