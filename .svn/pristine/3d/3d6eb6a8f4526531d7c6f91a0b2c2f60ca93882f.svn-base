using System;
using System.Collections.Generic;
using System.Text;

public partial class Consts
{
	//  2014/05/19
	public const int CONST_uiMaxQNodes_qyImObjTab = 3000;
	public const int CONST_uiMaxQNodes_qyImObjRegInfoTab = 3000;
	public const int CONST_uiMaxQNodes_qyImObjRegInfoTab1 = 3000;
	public const int CONST_uiMaxQNodes_qyImGrpInfoTab = 3000;
	public const int CONST_uiMaxQNodes_qyImGrpMemTab = 10000;
	public const int CONST_uiMaxQNodes_qyImObjRuleTab = 1000;
	public const int CONST_uiMaxQNodes_qyDynBmpTab = 1000;


#if DEBUG
	public const int CONST_uiMaxQNodes_qyImTaskTab = 100;   //10	//  1000
	public const int CONST_uiMaxQNodes_qyImMsgTab = 10;
#else
public const int  CONST_uiMaxQNodes_qyImTaskTab		=	1000;
public const int  CONST_uiMaxQNodes_qyImMsgTab		=	1000;
#endif

}

namespace qy
{


	public unsafe delegate bool PF_bGetImAmRcdBySth(IntPtr pDbParam, int iDbType, char * misServName, QY_MESSENGER_ID* pIdInfo, char * messengerName, int id, QY_imAm_RCD* pObj);

/*
typedef BOOL(  *PF_bGetMessengerRegInfoBySth  )(void* pDbParam, int iDbType, QY_DMITEM* pFieldIdTable, LPCTSTR pTabName, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, int iRcdId, QY_MESSENGER_REGINFO* pRegInfo);
typedef BOOL(  *PF_bGetImOtherRegInfoBySth  )(void* pDbParam, int iDbType, QY_DMITEM* pFieldIdTable, LPCTSTR pTabName, MSGR_ADDR* pAddr, int iRcdId, QY_MESSENGER_REGINFO* pRegInfo);
typedef BOOL(  *PF_bGetMeInfoBySth  )(void* pDbParam, int iDbType, LPCTSTR misServName, QY_MESSENGER_INFO* pObj);
typedef BOOL(  *PF_bGetMessengerInfoBySth  )(QM_dbFuncs* pDbFuncs, void* pDbParam, int iDbType, QY_DMITEM* pFieldIdTable, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, int iRcdId, QY_MESSENGER_INFO* pObjParam, QY_MESSENGER_REGINFO* pRegInfo, QY_MESSENGER_REGINFO* pRegInfoInTab1, QY_MESSENGER_phoneInfo* pPhoneInfo);
typedef int (  * PF_insertImObj_recoverMessenger  ) (QM_dbFuncs* pDbFuncs, void* pDbParam, int iDbType, QY_MESSENGER_INFO* pObj, time_t tLastModifiedTime);
typedef int (  * PF_updateImObj_recoverMessenger  ) (void* pDbParam, int iDbType, QY_MESSENGER_INFO* pObj, time_t tLastModifiedTime, int iRcdId);
typedef int (  * PF_updateImObj_recoverMessenger2  ) (void* pDbParam, int iDbType, QY_MESSENGER_INFO* pObj, time_t tLastModifiedTime, int iRcdId);

typedef int (  * PF_insertImObj_recoverImGrp  ) (void* pDb, int iDbType, unsigned  int uiObjType, IM_GRP_INFO  * pGrpInfo, time_t  tLastModifiedTime  );
typedef int (  * PF_updateImObj_recoverImGrp  ) (void* pDb, int iDbType, unsigned  int uiObjType, IM_GRP_INFO  * pGrpInfo, time_t  tLastModifiedTime,  int iRcdId  );
typedef int (  * PF_updateImObj_recoverImGrp2  ) (void* pDb, int iDbType, unsigned  int uiObjType, IM_GRP_INFO  * pGrpInfo, time_t  tLastModifiedTime,  int iRcdId  );

typedef BOOL(  *PF_bGetImGrpInfoBySth  )(void* pDbParam, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, IM_GRP_INFO* pRcd);
typedef int (  * PF_insertImGrp_recoverImGrp  ) (void* pDbParam, int iDbType, IM_GRP_INFO* pGrpInfo);
typedef int (  * PF_updateImGrp_recoverImGrp  ) (void* pDbParam, int iDbType, IM_GRP_INFO* pGrpInfo, int iRcdId);
typedef BOOL(  *PF_bGetImGrpMemBySth  )(void* pDbParam, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo_grp, QY_MESSENGER_ID* pIdInfo_mem, int iRcdId, IM_GRP_MEM* pRcd);
//  typedef  int  (  *PF_insertImGrpMem_recoverImGrpMem  )(  void  *  pDb,  int  iDbType,  IM_GRP_MEM  *  pGrpMem  );
typedef int (  * PF_insertImGrpMem_recoverImGrpMem  ) (void* pDb, int iDbType, IM_GRP_MEM* pGrpMem, time_t tLastModifiedTime);
//  typedef  int  (  *PF_updateImGrpMem_recoverImGrpMem  )(  void  *  pDb,  int  iDbType,  IM_GRP_MEM  *  pGrpMem,  int  iRcdId  );
typedef int (  * PF_updateImGrpMem_recoverImGrpMem  ) (void* pDb, int iDbType, IM_GRP_MEM* pGrpMem, time_t tLastModifiedTime, int iRcdId);
typedef int (  * PF_updateImGrpMem_recoverImGrpMem2  ) (void* pDbParam, int iDbType, IM_GRP_MEM* pGrpMem, time_t tLastModifiedTime, int iRcdId);
typedef BOOL(  *PF_bIdInfoExistedInImObjRegInfoTab  )(void* pDbParam, int iDbType, QY_MESSENGER_ID* pIdInfo, LPCTSTR tabName);
typedef int (  * PF_insertImObjRegInfo_qisRegUsrInfoInTab  ) (void* pDbParam, int iDbType, QY_MESSENGER_REGINFO* pRegInfo, LPCTSTR tabName);
typedef int (  * PF_updateImObjRegInfo_qisRegUsrInfoInTab  ) (void* pDbParam, int iDbType, QY_MESSENGER_REGINFO* pRegInfo, LPCTSTR tabName);

typedef int (  * PF_qnmRegUsrInfo  ) (QM_dbFuncs* pDbFuncs, void* pDb, int iDbType, QY_DMITEM* pFieldIdTable, QNM_PC_INFO* pPcInfo, QNM_REG_INFO* pRegInfo);
typedef int (  * PF_qisRegUsrInfo  ) (QM_dbFuncs* pDbFuncs, void* pDb, int iDbType, QY_DMITEM* pFieldIdTable, QY_MESSENGER_INFO* pMessengerInfo, QY_MESSENGER_REGINFO* pRegInfo, BOOL bLogReRegEvent);
typedef BOOL(  *PF_bSelectImMsg_logImMsg  )(void* pDb, int iDbType, QY_DMITEM* pFieldIdTable, IM_MSG_RCD* pRcd);
typedef int (  * PF_insertImMsg_logImMsg  ) (QM_dbFuncs* pDbFuncs, void* pDb, int iDbType, QY_DMITEM* pFieldIdTable, IM_MSG_RCD* pRcd);
typedef int (  * PF_auditNewMessenger  ) (void* pReserved, QY_MESSENGER_ID* pLastIdInfo, void* pLicenseCtx, void* pDb, int iDbType, POLICY_imAuthCond* pAuthCond, QY_MESSENGERAUTHTMP_RCD* pNewMessenger);
typedef BOOL(  *PF_bGetImMsgRcdBySth  )(void* pDbParam, int iDbType, int id, IM_MSG_RCD* pObj);
typedef BOOL(  *PF_bGetPcInfoByMac  )(void* pDbParam, char* mac, unsigned  char ucbMac0, QY_DMITEM  * pFieldIdTable, QNM_PC_INFO  * pPcInfo, QNM_REG_INFO  * pRegInfo  );
typedef BOOL(  *PF_bGetPcInfoByMacEx  )(void* pDbParam, char* mac, unsigned  char ucbMac0, QY_DMITEM  * pFieldIdTable, QNM_PC_INFO  * pPcInfo, QNM_REG_INFO  * pRegInfo, QNM_REG_INFO  * pRegInfoInTab1  );
typedef BOOL(  *PF_bLogEventFunc_is  )(QM_dbFuncs* pDbFuncs, void* pDb, int iDbType, QIS_EVENT* pEvent);
typedef int (  * PF_getEventInfoBySth  ) (void* pDbParam, int iDbType, QIS_EVENT* pEvent);
typedef int (  * PF_getPcEventInfoByMac0  ) (void* pDbParam, QNM_PC_EVENT* pEvent);
typedef BOOL(  *PF_bLogPcEventFunc  )(void* pDb, int iDbType, QNM_PC_EVENT* pEvent);
typedef int (  * PF_qisRegOtherInfoInTab  ) (void* pDb, int iDbType, QY_DMITEM* pFieldIdTable, MSGR_ADDR* pAddr, QY_MESSENGER_REGINFO* pRegInfo, LPCTSTR tabName);
typedef BOOL(  *PF_bClearupImMsg_isCli  )(void* pDb, int iDbType, LPCTSTR wherePart);
typedef BOOL(  *PF_bClearupEvent_is  )(QY_CLEARUPINFO* pClearupInfo  );
typedef BOOL(  *PF_bClearupImMsg  )(QY_CLEARUPINFO* pClearupInfo  );
typedef BOOL(  *PF_bClearupImHisTask  )(QY_CLEARUPINFO* pClearupInfo  );
typedef int (  * PF_getObjIndex  ) (QY_OBJ_DB* pObjDb, int iObjId, QY_OBJINDEX_RCD* pObjIndex);

typedef int (  * PF_listObjs_dlgMsgList  ) (void* pDbParam, void* pQueryParam, HWND hListCtrlParam, QY_MESSENGER_ID* pIdInfoParam);
//
typedef BOOL(  *PF_bGetMessengerPhoneInfoBySth  )(void* pDbParam, int iDbType, LPCTSTR misServName, unsigned  int uiDevType, LPCTSTR  wDevIdStr,  QY_MESSENGER_ID* pIdInfo,  int id, QY_MESSENGER_phoneInfo  * pRcd  );
typedef int (  * PF_recoverMessengerPhoneInfo  ) (QM_dbFuncs* pDbFuncs, void* pDb, int iDbType, MSGR_ADDR* pAddr, void* p1);

typedef int (  * PF_updateImObj_me  ) (void* pDb, int iDbType, QY_MESSENGER_INFO* pObj_me);
typedef BOOL(  *PF_bGetImObjRulesReq  )(void* pDbParam, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, QY_MESSENGER_ID* pIdInfo_related, LPCTSTR condPart, unsigned  short usMaxMemsPerSnd, REFRESH_imObjRules_req  * pReq  );
typedef BOOL(  *PF_bGetImObjRuleRcdBySth  )(void* pDbParam, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, REFRESH_imObjRule_reqMem* pMem, int iRcdId, QY_imObjRule_rcd* pRcd);
typedef int (  * PF_insertImObjRule_recoverImObjRules  ) (void* pDb, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, REFRESH_imObjRule_reqMem* pReqMem, time_t tLastModifiedTime);
typedef int (  * PF_deleteImObjRule_recoverImObjRules  ) (void* pDb, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, REFRESH_imObjRule_reqMem* pReqMem, int rcdId);
typedef int (  * PF_updateImObjRule_recoverImObjRules  ) (void* pDb, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, REFRESH_imObjRule_reqMem* pReqMem, time_t tLastModifiedTime, int rcdId);
typedef int (  * PF_updateImObjRule_recoverImObjRules2  ) (void* pDb, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, REFRESH_imObjRule_reqMem* pReqMem, time_t tLastModifiedTime, int rcdId);

//
typedef int (  * PF_updateImObj_refreshImGrps_end  ) (void* pDb, int iDbType, LPCTSTR misServName, unsigned  int uiObjType, time_t  tLastModifiedTime  );


typedef BOOL(  *PF_bNeedRetrieveImGrpMems  )(void* pDb, int iDbType, LPCTSTR misServName);
typedef int (  * PF_updateImGrpMem_refreshImGrpMems_end  ) (void* pDb, int iDbType, LPCTSTR misServName, time_t tLastModifiedTime);


typedef int (  * PF_updateImObj_refreshContacts_end  ) (void* pDb, int iDbType, LPCTSTR misServName, time_t tLastModifiedTime);

//
typedef int (  * PF_deleteOldImObjRule_mcProcResp_refreshImObjRulesReq  ) (void* pSubThreadInfoParam, void* pSciParam, void* pMisCntParam, MIS_MSG_INPUT* pMsgInput, void* pCtxParam);
typedef int (  * PF_selectNextImObjRule_mcProcResp_refreshImObjRulesReq  ) (void* pSubThreadInfoParam, void* pSciParam, void* pMisCntParam, MIS_MSG_INPUT* pMsgInput, void* pCtxParam, QY_MESSENGER_ID* pIdInfo_related);

typedef void (  * PF_fillImObjs_msgr  ) (HWND hDlg, void* pVar, void* pDb);
typedef void (  * PF_fillImObjs_grp  ) (HWND hDlg, void* pVar, void* pDb);
typedef int (  * PF_selectImTask_dlgTalk_loadTasks  ) (HWND hDlgTalk, void* pTmpParam, void* pDbParam);
typedef BOOL(  *PF_bSelectImTask_storeTaskInDb  )(void* pDb, int iDbType, void* pMisCntParam, IM_TASK_RCD* pRcd, BOOL bInHis);
typedef int (  * PF_insertImTask_storeTaskInDb  ) (void* pDb, int iDbType, void* pMisCntParam, int iTaskId_suggested, IM_TASK_RCD* pRcd, BOOL bInHis);
typedef int (  * PF_updateTaskStatus  ) (void* pDb, int iStatus, int iTaskId);
typedef BOOL(  *PF_bMoveTask2His  )(void* pMisCntParam, void* pDb, int iDbType);
typedef BOOL(  *PF_bClearupDeletedImObjs_isClient  )(void* pMisCntParam, void* pDb, int iDbType);
typedef BOOL(  *PF_bGetImTaskRcdBySth  )(void* pDb, int iDbType, BOOL bHisTab, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, time_t tSendTime, unsigned  int uiTranNo,  int id, IM_TASK_RCD  * pRcd  );
//
//
typedef BOOL(  *PF_bGetQyDynBmpRcdBySth  )(void* pDb, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, unsigned  int uiObjType, unsigned  short usIndex,  int id, QY_dynBmp_RCD  * pRcd  );
//
typedef BOOL(  *PF_bViewImTaskList_unproced  )(QY_OBJ_DB* pObjDb, LPCTSTR docName, LPCTSTR wherePart);
typedef BOOL(  *PF_bViewImTaskList_cur  )(QY_OBJ_DB* pObjDb, LPCTSTR docName, LPCTSTR wherePart);
typedef BOOL(  *PF_bViewImTaskList_his  )(QY_OBJ_DB* pObjDb, LPCTSTR docName, LPCTSTR wherePart);
typedef BOOL(  *PF_bViewImObjList  )(QY_OBJ_DB* pObjDb, LPCTSTR docName, LPCTSTR wherePart);
typedef BOOL(  *PF_bViewRegInfoList  )(QY_OBJ_DB* pObjDb, LPCTSTR docName, LPCTSTR wherePart);
typedef BOOL(  *PF_bViewImGrpList  )(QY_OBJ_DB* pObjDb, LPCTSTR docName, LPCTSTR wherePart);
typedef BOOL(  *PF_bViewImGrpMemList_isClient  )(QY_OBJ_DB* pObjDb, LPCTSTR docName, LPCTSTR wherePart);

//
typedef BOOL(  *PF_bViewImObjRuleList_is  )(QY_OBJ_DB* pObjDb  );
//typedef  BOOL  (  *PF_bViewSharedDynBmpList_isClient  )(  QY_OBJ_DB  *  pObjDb,  LPCTSTR  docName,  LPCTSTR  whereClause  );

//
typedef BOOL(  *PF_bInsertPhoneGuest_procMsgTalk_work  )(void* pDbParam, int iDbType, void* pQyMcParam, MIS_MSG_TALK* pMsg, void* pGuestParam);
typedef BOOL(  *PF_bUpdateImTask_bChkQyMcEnv_mis  )(void* pDb, int iStatus_set, int iStatus_0, int iStatus_1);
//  typedef  int  (  *PF_deleteDynBmp_tmpHandler_delOld_dynBmpQ  )(  void  *  pDb,  int  id  );
typedef int (  * PF_deleteOldDynBmp_mcProcResp_retrieveDynBmps  ) (void* pDb, int iDbType, char* pTimeBuf);
//typedef  int  (  *PF_init_mcProcResp_retrieveDynBmps  )(  void  *  pDb,  void  *  pCtxParam  );
typedef BOOL(  *PF_bInsertDynBmp_mcProcResp_retrieveDynBmps  )(void* pDb, void* pMisCntParam, QIS_dynBmp_info* pMem, char* pTimeBuf);
typedef BOOL(  *PF_bUpdateDynBmp_mcProcResp_retrieveDynBmps  )(void* pDb, QIS_dynBmp_info* pMem, char* pTimeBuf, int rcdId);
typedef BOOL(  *PF_bUpdateImObjRegInfo_procMsgInput_scheduler  )(void* pDb, void* pSciParam, void* pMisCntParam, QY_MESSENGER_ID* pIdInfo);

typedef BOOL(  *PF_bStatImTasks  )(void* pProcInfoParam, void* pMisCntParam, void* pDb, int iDbType);
typedef BOOL(  *PF_bDeleteFromTabById  )(void* pDb, int iDbType, LPCTSTR pTabName, int id);
typedef BOOL(  *PF_bDeleteFromTabByIdInfo  )(void* pDb, int iDbType, LPCTSTR pTabName, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo);
typedef BOOL(  *PF_bDeleteImOtherRegInfoByAddr  )(void* pDb, int iDbType, LPCTSTR misServName, LPCTSTR pTabName, MSGR_ADDR* pAddr);
typedef int (  * PF_iSelectImGrpMem_dlgSelect_isCli  ) (void* pDb, int iDbType, LPCTSTR misServName, QY_MESSENGER_ID* pIdInfo, HWND idc_hWnd);
typedef int (  * PF_iSelectImObj_dlgSelect_isCli  ) (void* pDb, int iDbType, LPCTSTR misServName, HWND idc_hWnd);
#if  0
typedef  int  (  *PF_iSelectImObjAuth2_dlgSelect_isCli  )(  void  *  pDb, int  iDbType,  LPCTSTR  misServName,  HWND  idc_hWnd  );
#endif
typedef int (  * PF_iSelectDynBmp_dlgSelect_isCli  ) (void* pDb, int iDbType, LPCTSTR misServName, HWND idc_hWnd);
*/


	public class QM_dbFuncs
	{

		public PF_bGetImAmRcdBySth pf_bGetImAmRcdBySth;
		/*
		PF_bGetMessengerRegInfoBySth pf_bGetMessengerRegInfoBySth;
		PF_bGetImOtherRegInfoBySth pf_bGetImOtherRegInfoBySth;
		PF_bGetMeInfoBySth pf_bGetMeInfoBySth;
		PF_bGetMessengerInfoBySth pf_bGetMessengerInfoBySth;
		PF_insertImObj_recoverMessenger pf_insertImObj_recoverMessenger;
		PF_updateImObj_recoverMessenger pf_updateImObj_recoverMessenger;
		PF_updateImObj_recoverMessenger2 pf_updateImObj_recoverMessenger2;


		PF_insertImObj_recoverImGrp pf_insertImObj_recoverImGrp;
		PF_updateImObj_recoverImGrp pf_updateImObj_recoverImGrp;
		PF_updateImObj_recoverImGrp2 pf_updateImObj_recoverImGrp2;
		PF_bGetImGrpInfoBySth pf_bGetImGrpInfoBySth;
		PF_insertImGrp_recoverImGrp pf_insertImGrp_recoverImGrp;
		PF_updateImGrp_recoverImGrp pf_updateImGrp_recoverImGrp;
		PF_bGetImGrpMemBySth pf_bGetImGrpMemBySth;
		PF_insertImGrpMem_recoverImGrpMem pf_insertImGrpMem_recoverImGrpMem;
		PF_updateImGrpMem_recoverImGrpMem pf_updateImGrpMem_recoverImGrpMem;
		PF_updateImGrpMem_recoverImGrpMem2 pf_updateImGrpMem_recoverImGrpMem2;
		PF_bIdInfoExistedInImObjRegInfoTab pf_bIdInfoExistedInImObjRegInfoTab;
		PF_insertImObjRegInfo_qisRegUsrInfoInTab pf_insertImObjRegInfo_qisRegUsrInfoInTab;
		PF_updateImObjRegInfo_qisRegUsrInfoInTab pf_updateImObjRegInfo_qisRegUsrInfoInTab;

		PF_qnmRegUsrInfo pf_qnmRegUsrInfo;
		PF_qisRegUsrInfo pf_qisRegUsrInfo;
		PF_bSelectImMsg_logImMsg pf_bSelectImMsg_logImMsg;
		PF_insertImMsg_logImMsg pf_insertImMsg_logImMsg;
		PF_auditNewMessenger pf_auditNewMessenger;
		PF_bGetImMsgRcdBySth pf_bGetImMsgRcdBySth;
		PF_bLogEventFunc_is pf_bLogEventFunc_is;
		PF_bGetPcInfoByMac pf_bGetPcInfoByMac;
		PF_bGetPcInfoByMacEx pf_bGetPcInfoByMacEx;
		PF_getEventInfoBySth pf_getEventInfoBySth;
		PF_getPcEventInfoByMac0 pf_getPcEventInfoByMac0;
		PF_bLogPcEventFunc pf_bLogPcEventFunc;
		PF_qisRegOtherInfoInTab pf_qisRegOtherInfoInTab;
		PF_bClearupImMsg_isCli pf_bClearupImMsg_isCli;
		PF_bClearupEvent_is pf_bClearupEvent_is;
		PF_bClearupImMsg pf_bClearupImMsg;
		PF_bClearupImHisTask pf_bClearupImHisTask;
		PF_getObjIndex pf_getObjIndex;

		PF_bGetMessengerPhoneInfoBySth pf_bGetMessengerPhoneInfoBySth;
		PF_recoverMessengerPhoneInfo pf_recoverMessengerPhoneInfo;

		PF_updateImObj_me pf_updateImObj_me;
		PF_bGetImObjRulesReq pf_bGetImObjRulesReq;
		PF_bGetImObjRuleRcdBySth pf_bGetImObjRuleRcdBySth;
		PF_insertImObjRule_recoverImObjRules pf_insertImObjRule_recoverImObjRules;
		PF_deleteImObjRule_recoverImObjRules pf_deleteImObjRule_recoverImObjRules;
		PF_updateImObjRule_recoverImObjRules pf_updateImObjRule_recoverImObjRules;
		PF_updateImObjRule_recoverImObjRules2 pf_updateImObjRule_recoverImObjRules2;

		//  isCli
		PF_updateImObj_refreshImGrps_end pf_updateImObj_refreshImGrps_end;
		//
		PF_bNeedRetrieveImGrpMems pf_bNeedRetrieveImGrpMems;
		//
		PF_updateImGrpMem_refreshImGrpMems_end pf_updateImGrpMem_refreshImGrpMems_end;
		//
		PF_updateImObj_refreshContacts_end pf_updateImObj_refreshContacts_end;

		//
		PF_deleteOldImObjRule_mcProcResp_refreshImObjRulesReq pf_deleteOldImObjRule_mcProcResp_refreshImObjRulesReq;
		PF_selectNextImObjRule_mcProcResp_refreshImObjRulesReq pf_selectNextImObjRule_mcProcResp_refreshImObjRulesReq;

		PF_fillImObjs_msgr pf_fillImObjs_msgr;
		PF_fillImObjs_grp pf_fillImObjs_grp;
		PF_selectImTask_dlgTalk_loadTasks pf_selectImTask_dlgTalk_loadTasks;
		PF_bSelectImTask_storeTaskInDb pf_bSelectImTask_storeTaskInDb;
		PF_insertImTask_storeTaskInDb pf_insertImTask_storeTaskInDb;
		PF_updateTaskStatus pf_updateTaskStatus;
		PF_bMoveTask2His pf_bMoveTask2His;
		PF_bClearupDeletedImObjs_isClient pf_bClearupDeletedImObjs_isClient;
		PF_bGetImTaskRcdBySth pf_bGetImTaskRcdBySth;
		//
		//PF_bSelectImGrpMem_dlgTalk_OnInitDialog	pf_bSelectImGrpMem_dlgTalk_OnInitDialog;

		PF_listObjs_dlgMsgList pf_listObjs_dlgMsgList;
		PF_bViewImTaskList_unproced pf_bViewImTaskList_unproced;
		PF_bViewImTaskList_cur pf_bViewImTaskList_cur;
		PF_bViewImTaskList_his pf_bViewImTaskList_his;

		PF_bViewImObjList pf_bViewImObjList;
		PF_bViewRegInfoList pf_bViewRegInfoList;
		PF_bViewImGrpList pf_bViewImGrpList;
		PF_bViewImGrpMemList_isClient pf_bViewImGrpMemList_isClient;        //  2014/04/18
		PF_bViewImObjRuleList_is pf_bViewImObjRuleList_is;          //  2014/04/18

		//
		PF_bGetQyDynBmpRcdBySth pf_bGetQyDynBmpRcdBySth;
		PF_bInsertPhoneGuest_procMsgTalk_work pf_bInsertPhoneGuest_procMsgTalk_work;
		PF_bUpdateImTask_bChkQyMcEnv_mis pf_bUpdateImTask_bChkQyMcEnv_mis;
		PF_deleteOldDynBmp_mcProcResp_retrieveDynBmps pf_deleteOldDynBmp_mcProcResp_retrieveDynBmps;
		//
		PF_bInsertDynBmp_mcProcResp_retrieveDynBmps pf_bInsertDynBmp_mcProcResp_retrieveDynBmps;
		PF_bUpdateDynBmp_mcProcResp_retrieveDynBmps pf_bUpdateDynBmp_mcProcResp_retrieveDynBmps;
		PF_bUpdateDynBmp_mcProcResp_retrieveDynBmps pf_bUpdateDynBmp_mcProcResp_retrieveDynBmps2;
		//
		PF_bUpdateImObjRegInfo_procMsgInput_scheduler pf_bUpdateImObjRegInfo_procMsgInput_scheduler;
		PF_bStatImTasks pf_bStatImTasks;
		PF_bDeleteFromTabById pf_bDeleteFromTabById;
		PF_bDeleteFromTabByIdInfo pf_bDeleteFromTabByIdInfo;
		PF_bDeleteImOtherRegInfoByAddr pf_bDeleteImOtherRegInfoByAddr;
		PF_iSelectImGrpMem_dlgSelect_isCli pf_iSelectImGrpMem_dlgSelect_isCli;
		PF_iSelectImObj_dlgSelect_isCli pf_iSelectImObj_dlgSelect_isCli;
		//
		PF_iSelectDynBmp_dlgSelect_isCli pf_iSelectDynBmp_dlgSelect_isCli;
		*/

	};

	public class CMyDb
{
		bool m_var_bInited;

		GENERIC_Q[] m_var_q_tabs;	//[20];

		//
		GENERIC_Q m_var_pQ_qyImObjTab;
		GENERIC_Q m_var_pQ_qyImObjRegInfoTab;
		GENERIC_Q m_var_pQ_qyImObjRegInfoTab1;
		GENERIC_Q m_var_pQ_qyImGrpInfoTab;
		GENERIC_Q m_var_pQ_qyImGrpMemTab;
		GENERIC_Q m_var_pQ_qyImObjRuleTab;
		GENERIC_Q m_var_pQ_qyImTaskTab;
		GENERIC_Q m_var_pQ_qyImMsgTab;
		GENERIC_Q m_var_pQ_qyDynBmpTab;


		//
		public CMyDb(  ) 
		{  
			//memset(  &m_var,  0,  sizeof(m_var  )  );
		}

	 ~CMyDb()
	{
		if (m_var_bInited) qyCloseDb();
	}




	public unsafe bool bQyOpenDb(string connectStr)
	{
		bool bRet = false;

		string pTabName;
		uint uiMaxQNodes;
		int index = 0;

		//
		if (m_var_q_tabs != null) return false;
		m_var_q_tabs = new GENERIC_Q[15];
		for ( int i = 0; i< m_var_q_tabs.Length; i ++ )
        {
				m_var_q_tabs[i] = new GENERIC_Q();
        }

		//
		pTabName = Consts.CONST_tabName_qyImObjTab;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyImObjTab;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyImObjTab = m_var_q_tabs[index];
		index++;
		pTabName = Consts.CONST_tabName_qyImObjRegInfoTab;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyImObjRegInfoTab;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyImObjRegInfoTab = m_var_q_tabs[index];
		index++;
		pTabName = Consts.CONST_tabName_qyImObjRegInfoTab1;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyImObjRegInfoTab1;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyImObjRegInfoTab1 = m_var_q_tabs[index];
		index++;
		pTabName = Consts.CONST_tabName_qyImGrpInfoTab;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyImGrpInfoTab;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyImGrpInfoTab = m_var_q_tabs[index];
		index++;
		pTabName = Consts.CONST_tabName_qyImGrpMemTab;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyImGrpMemTab;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyImGrpMemTab = m_var_q_tabs[index];
		index++;

		pTabName = Consts.CONST_tabName_qyImObjRuleTab;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyImObjRuleTab;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyImObjRuleTab = m_var_q_tabs[index];
		index++;

		pTabName = Consts.CONST_tabName_qyImTaskTab;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyImTaskTab;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyImTaskTab = m_var_q_tabs[index];
		index++;

		pTabName = Consts.CONST_tabName_qyImMsgTab;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyImMsgTab;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyImMsgTab = m_var_q_tabs[index];
		index++;

		pTabName = Consts.CONST_tabName_qyDynBmpTab;
		uiMaxQNodes = Consts.CONST_uiMaxQNodes_qyDynBmpTab;
		if (qyFuncs.initGenericQ(pTabName, pTabName, 0, uiMaxQNodes, qyFuncs.mymalloc, qyFuncs.myfree, m_var_q_tabs[index])!=0) goto errLabel;
		m_var_pQ_qyDynBmpTab = m_var_q_tabs[index];
		index++;
		//
		if (index > m_var_q_tabs.Length) goto errLabel;

		bRet = true;

	errLabel:
		if (bRet)
		{
			m_var_bInited = true;
		}
		if (!bRet)
		{
			qyCloseDb();
		}
		return bRet;
	}


	public unsafe void qyCloseDb()
	{
		int i;

		for (i = 0; i < m_var_q_tabs.Length; i++)
		{
			qyFuncs.exitGenericQ(m_var_q_tabs[i]);
		}

		m_var_bInited = false;
	}


}




}
