using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

partial class Consts
{
	public const int cntof_qMem_mcTask_tDesc = 16;
}


namespace qy
{
	public unsafe struct QMEM_mcTask
	{
		public SYNC_mt_cnt syncMtCnt;

		//
		public bool bUsed;                         //  赋值true表明new

		//
		public QY_MEMORY qElemMemory;
		public uint size;

		//
		public bool ucbQElemInited;                   //  表明是否初始化

		//
		public bool bNeedRemoved;                  //  是否准备放弃

		//
		public fixed char tDesc[Consts.cntof_qMem_mcTask_tDesc + 1];

	}
	;


	public unsafe struct MC_sharedQ_var
	{

		public GENERIC_Q_CFG cfg;

		//
		public PF_qElemNew pfQElemNew;
		public PF_qElemFree pfQElemFree;
		//
		public PF_qElemNewEx pfQElemNewEx;             //  2010/04/24
		public PF_qElemFreeEx pfQElemFreeEx;               //  2010/04/24
														   //
		public PF_qElemInit pfQElemInit;               //  2007/06/10
		public PF_qElemExit pfQElemExit;               //  
													   //
		public PF_qElemRemove pfQElemRemove;               //  2009/12/08
														   //
		public PF_qElemRemoveEx pfqElemRemoveEx;           //  2012/11/10




		//
		public QMEM_mcTask* pMems;
		public Mutex[] hMutexs;
		//
		public uint uiQNodes;

		//
		public uint dwThreadId_mgr;


	}
	;


    public class CMcSharedQ
    {
		public MC_sharedQ_var m_var;

		public bool bSetQInfo(string mutexName_sync, uint uiMaxCnt_sema, uint uiMilliSeconds_mutex_r, uint uiMilliSeconds_sema_r, uint uiMilliSeconds_mutex_w, uint uiMilliSeconds_sema_w)
		{
			return true;
		}

		public unsafe int initQ(GENERIC_Q_CFG pCfg, PF_qElemNewEx pfQElemNewEx, PF_qElemNew pfQElemNew, PF_qElemInit pfQElemInit, PF_qElemExit pfQElemExit, PF_qElemFreeEx pfQElemFreeEx, PF_qElemFree pfQElemFree)
		{
			int iErr = -1;

			//memcpy(&m_var.cfg, pCfg, sizeof(m_var.cfg));
			m_var.cfg = pCfg;
			//
			m_var.pfQElemNewEx = pfQElemNewEx;
			m_var.pfQElemFreeEx = pfQElemFreeEx;
			//
			m_var.pfQElemNew = pfQElemNew;
			m_var.pfQElemFree = pfQElemFree;
			//
			m_var.pfQElemInit = pfQElemInit;
			m_var.pfQElemExit = pfQElemExit;
			//

			//
			int size = (int)(sizeof(QMEM_mcTask) * m_var.cfg.uiMaxQNodes);
			m_var.pMems = (QMEM_mcTask*)qyFuncs.mymalloc(size);
			if (null==m_var.pMems) goto errLabel;
			qyFuncs.mymemset((IntPtr)m_var.pMems, 0, size);

			//
			m_var.hMutexs = new Mutex[m_var.cfg.uiMaxQNodes];
			if (m_var.hMutexs == null) goto errLabel;
			for ( int i = 0; i < m_var.cfg.uiMaxQNodes; i++)
            {
				m_var.hMutexs[i] = new Mutex(false);
				if (m_var.hMutexs[i] == null) goto errLabel;
            }

			iErr = 0;

		errLabel:

			return iErr;
		}


		string getMutexName(int i)
		{
			string str = string.Format("mcSharedObj{0}", i);
			return str;
		}



		unsafe void qNodeFree(QMEM_mcTask* pMem, bool bElemRemove)
		{
			ref MC_sharedQ_var pQ = ref m_var;			

			//if (pQ != &m_var) return;
			QMEM_mcTask* pQNode = pMem;

			if (pQNode->qElemMemory.m_pBuf!=IntPtr.Zero)
			{
				if (pQNode->ucbQElemInited)
				{
					if (pQ.pfQElemExit!=null) pQ.pfQElemExit(pQNode->qElemMemory.m_pBuf);
					pQNode->ucbQElemInited = false;
				}
				if (bElemRemove)
				{   //  2009/12/08
					string str;
					fixed(char *pName=pQ.cfg.name)
                    {
						str = new string(pName);
                    }
					if (pQ.pfqElemRemoveEx!=null) pQ.pfqElemRemoveEx(pQNode->qElemMemory.m_pBuf, (int)pQNode->size, str); //  2012/11/10
					else
					{
						if (pQ.pfQElemRemove!=null) pQ.pfQElemRemove(pQNode->qElemMemory.m_pBuf, str);
					}
				}
				if (pQ.pfQElemFreeEx!=null) pQ.pfQElemFreeEx(ref pQNode->qElemMemory);
				else
				{
					if (pQ.pfQElemFree!=null) pQ.pfQElemFree(pQNode->qElemMemory.m_pBuf);
				}
				pQNode->qElemMemory.m_pBuf = IntPtr.Zero;
			}
			//
			pQNode->ucbQElemInited = false;
			pQNode->bNeedRemoved = false;
			pQNode->bUsed = false;

			//
			//TCHAR tBuf[128];
			//_sntprintf(tBuf, mycountof(tBuf), _T("mcSharedQ::qNodeFree %s"), pQNode->tDesc);
			//showInfo_open(0, 0, tBuf);

			//
			return;
		}


		
		//
		unsafe int recalc_uiQNodes()
		{
			int iErr = -1;
			int i;
			int iQNodes = 0;

			for (i = 0; i < m_var.cfg.uiMaxQNodes; i++)
			{
				QMEM_mcTask* pMem = &m_var.pMems[i];
				//
				if (!pMem->bUsed) continue;
				//
				iQNodes++;
			}

			if (m_var.uiQNodes != iQNodes)
			{
				m_var.uiQNodes = (uint)iQNodes;
			}

			iErr = 0;
		errLabel:
			return iErr;
		}


		//
		public unsafe void exitQ()
		{
			int i;

			for (i = 0; i < m_var.cfg.uiMaxQNodes; i++)
			{
				QMEM_mcTask* pMem = &m_var.pMems[i];
				if (!pMem->bUsed) continue;
				{
					using (CQySyncObj syncObj = new CQySyncObj())
					{
						string mutexName;

						//
						pMem->bNeedRemoved = true;

						//
						mutexName = getMutexName(i);
						//
						if (qyFuncs.syncMtCnt_wLock_wait(&pMem->syncMtCnt, mutexName, m_var.hMutexs[i], syncObj, null, ("")) != 0)
						{
							continue;
						}
						//
						this.qNodeFree(pMem, true);
					}
				}
			}
			//
			this.recalc_uiQNodes();
			//
			if (isEmpty())
			{
				//MACRO_safeFree(m_var.pMems);
				if (m_var.pMems != null)
				{
					qyFuncs.myfree((IntPtr)m_var.pMems); m_var.pMems = null;
				}
				//
				for (i = 0; i < m_var.cfg.uiMaxQNodes; i++)
				{
					if (m_var.hMutexs[i] != null)
					{
						m_var.hMutexs[i].Close(); m_var.hMutexs[i] = null;
					}
				}
				m_var.hMutexs = null;
			}

			return;
		}


		unsafe int qPostMsg(IntPtr pQElem, uint size)
		{
			int iErr = -1;
			int i;
			QMEM_mcTask* pQNode = null;
			ref MC_sharedQ_var pQ = ref m_var;
			int iAllocType = 0;

			//
			for (i = 0; i < m_var.cfg.uiMaxQNodes; i++)
			{
				pQNode = &m_var.pMems[i];
				if (pQNode->bUsed) continue;
				break;
			}
			if (i == m_var.cfg.uiMaxQNodes)
			{
				//showInfo_open(0, 0, _T("mcSharedQ qPostMsg failed, full"));
				return Consts.CONST_qyRet_qFull;
			}

			//
			using (CQySyncObj syncObj = new CQySyncObj())
			{
				string mutexName;
				mutexName = getMutexName(i);
				if (mutexName == null) return -1;
				
				if (qyFuncs.syncMtCnt_wLock_noWait(&pQNode->syncMtCnt, mutexName, m_var.hMutexs[i], syncObj, null) != 0)
				{
					return -1;
				}

				//
				pQNode->bUsed = true;

				//
				string str = string.Format("sharedQ.mems{0}", i);
				//_sntprintf(pQNode->tDesc, mycountof(pQNode->tDesc), _T("sharedQ.mems[%d]"), i);
				qyFuncs.mytcsncpy(pQNode->tDesc, str, Consts.cntof_qMem_mcTask_tDesc);

				//
				if (pQ.pfQElemNewEx != null)
				{
					if (IntPtr.Zero == pQ.pfQElemNewEx(iAllocType, (int)size, ref pQNode->qElemMemory)) goto errLabel;
				}
				else
				{
					if (pQ.pfQElemNew != null)
					{           //  2007/08/15, Ôö¼Ó¶ÔpfQElemNewµÄ·Ç0µÄÐ£Ñé
						if (IntPtr.Zero == (pQNode->qElemMemory.m_pBuf = pQ.pfQElemNew((int)size))) goto errLabel;
					}
				}
				if (IntPtr.Zero != pQNode->qElemMemory.m_pBuf && size != 0)
				{
					qyFuncs.mymemcpy(pQNode->qElemMemory.m_pBuf, pQElem, size);
					pQNode->size = size;
				}
				//
				if (pQ.pfQElemInit != null && pQ.pfQElemInit(pQNode->qElemMemory.m_pBuf) != 0) goto errLabel;
				pQNode->ucbQElemInited = true;

				//
				qyFuncs.syncMtCnt_start(&pQNode->syncMtCnt, qyFuncs.getuiNextTranNo);

			}


			//pQ->uiQNodes  ++  ;
			this.recalc_uiQNodes();



			iErr = 0;

		errLabel:

			//
			if (iErr!=0)
			{
				if (pQNode!=null) qNodeFree( pQNode, false);
			}


			//  2015/09/10
		

			//
			return iErr;
		}

		unsafe int qGetMsg(IntPtr pQElem, uint* puiSize)
		{

			return -1;
		}

		unsafe int qRemoveMsg(PF_bCommonHandler pf_bRemoveCond, void* p0, void* p1)
		{
			int iErr = -1;
			int i;
			bool tmpbRet;

			//
			chkMsgs_toBeRemoved();

			//
			for (i = 0; i < m_var.cfg.uiMaxQNodes; i++)
			{
				QMEM_mcTask* pMem = &m_var.pMems[i];
				if (!pMem->bUsed) continue;
				//
				{
					using (CQySyncCnt syncCnt = new CQySyncCnt())
					{

						if (qyFuncs.syncMtCnt_rLock(&pMem->syncMtCnt, syncCnt, ("")) != 0) continue;
						//
						tmpbRet = pf_bRemoveCond((IntPtr)p0, (IntPtr)p1, pMem->qElemMemory.m_pBuf);
						if (!tmpbRet) continue;
					}
				}
				//
				{
					pMem->bNeedRemoved = true;
					//
					using (CQySyncObj syncObj = new CQySyncObj())
					{
						string mutexName;
						//
						mutexName = getMutexName(i);
						if (mutexName == null) continue;
						if (qyFuncs.syncMtCnt_wLock_noWait(&pMem->syncMtCnt, mutexName, m_var.hMutexs[i], syncObj, null) != 0) continue;
						//
						qNodeFree( pMem, true);
					}
				}
			}
			//
			this.recalc_uiQNodes();

			iErr = 0;
		errLabel:

			return iErr;
		}



		public unsafe void emptyQ()
		{
			int iErr = -1;
			int i;
			int tmpbRet;

			for (i = 0; i < m_var.cfg.uiMaxQNodes; i++)
			{
				QMEM_mcTask* pMem = &m_var.pMems[i];
				if (!pMem->bUsed) continue;
				//
				{
					pMem->bNeedRemoved = true;
					//
					using (CQySyncObj syncObj = new CQySyncObj())
					{
						string mutexName;
						//
						mutexName = getMutexName(i);
						if (mutexName == null) continue;
						if (qyFuncs.syncMtCnt_wLock_wait(&pMem->syncMtCnt, mutexName, m_var.hMutexs[i], syncObj, null, (""))!=0) continue;
						//
						qNodeFree( pMem, true);
					}
				}
			}
			//
			this.recalc_uiQNodes();

			iErr = 0;
		errLabel:

			return;
		}



		unsafe int qTraverse(PF_commonHandler pf_visit, void* p0, void* p1)
		{
			int iErr = -1;
			int i;
			int tmpiRet;

			//
			int nNodes = (int)m_var.uiQNodes;

			//
			for (i = 0; i < m_var.cfg.uiMaxQNodes && nNodes!=0; i++)
			{
				QMEM_mcTask* pMem = &m_var.pMems[i];
				if (!pMem->bUsed) continue;
				//
				{
					using (CQySyncCnt syncCnt = new CQySyncCnt())
					{

						if (qyFuncs.syncMtCnt_rLock(&pMem->syncMtCnt, syncCnt, ("")) != 0) continue;
						//
						if (!pMem->ucbQElemInited || pMem->bNeedRemoved) continue;
						//
						nNodes--;
						//
						tmpiRet = pf_visit((IntPtr)p0, (IntPtr)p1, pMem->qElemMemory.m_pBuf);
						if (tmpiRet != 0)
						{
							iErr = tmpiRet; goto errLabel;
						}
					}
				}
			}

			if (nNodes!=0)
			{
			}

			//
			iErr = 0;
		errLabel:

			return iErr;

			return -1;
		}


		unsafe int qTraverse_mono(PF_commonHandler pf_visit, void* p0, void* p1)
		{
#if false
			int iThreadId = GetCurrentThreadId();
			if (iThreadId != m_var.dwThreadId_mgr)
			{
				//showInfo_open(0, 0, _T("mcSharedQ: qTraverse_mono failed, not thread mgr"));
				return -1;
			}
#endif

			return qTraverse(pf_visit, p0, p1);
		}


		bool isFull()
		{
			if (m_var.uiQNodes >= m_var.cfg.uiMaxQNodes) return true;
			return false;
		}

		bool isWarning(uint uiQNodes_warningInterval)      //  判断是否队列的成员空闲空间〈uiQNodes_interval
		{
			if (m_var.uiQNodes + uiQNodes_warningInterval >= m_var.cfg.uiMaxQNodes) return true;

			return false;
		}


		bool isEmpty()
		{
			if (0==m_var.uiQNodes) return true;

			return false;
		}


		unsafe int chkMsgs_toBeRemoved()
		{
			int iErr = -1;
			int i;
#if false
			int iThreadId = GetCurrentThreadId();

			if (iThreadId != m_var.dwThreadId_mgr)
			{
			return -1;
			}
#endif

			//
			for (i = 0; i < m_var.cfg.uiMaxQNodes; i++)
			{
				QMEM_mcTask* pMem = &m_var.pMems[i];
				if (!pMem->bUsed) continue;
				//
				if (pMem->ucbQElemInited
					&& !pMem->bNeedRemoved
					&& pMem->syncMtCnt.ulTranNo !=0)
				{
					continue;
				}
				//
				{
					pMem->bNeedRemoved = true;
					//
					using (CQySyncObj syncObj = new CQySyncObj()) {
						string mutexName;
						//
						mutexName = getMutexName(i);
						if( mutexName==null) continue;
						if (qyFuncs.syncMtCnt_wLock_noWait(&pMem->syncMtCnt, mutexName, m_var.hMutexs[i], syncObj, null)!=0) continue;
						//
						qNodeFree( pMem, true);
					}
				}
			}
			//
			this.recalc_uiQNodes();

			iErr = 0;
		errLabel:
			return iErr;

		}

		

	}


}
